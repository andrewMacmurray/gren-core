module Stream exposing (..)


import Gren.Kernel.Stream
import Basics exposing (Bool, Int, (<|), (++), max)
import Bytes exposing (Bytes)
import String exposing (String)
import Task exposing (Task)


type Readable value
    = Readable


type Writable value
    = Writable


type Error
    = Closed
    | Cancelled String
    | Locked


-- Generic



{-
type alias Transformer reason state in out =
 (state -> in -> TransformAction reason state out)


type TransformAction reason state value
    = UpdateState state
    | Send
        { state : state
        , send : value
        }
    | Close
    | Cancel reason


createTransformStream : Transformer reason state in out -> Task Never (StreamPair reason in out)


-- Readable
-}


type alias ReadResult value =
    { streamClosed : Bool
    , value : value
    }


read : Readable value -> Task Error (ReadResult value)
read =
    Gren.Kernel.Stream.read

{-
cancelReads : ReadableStream reason value -> Task Never {}

closeReads : ReadableStream reason value -> Task Never {}
-}

-- Writable


write : value -> Writable value -> Task Error {}
write =
    Gren.Kernel.Stream.write


writeStringAsBytes : String -> Writable Bytes -> Task Error {}
writeStringAsBytes str stream =
    write (Bytes.fromString str) stream


writeLineAsBytes : String -> Writable Bytes -> Task Error {}
writeLineAsBytes str stream =
    write (Bytes.fromString <| str ++ "\n") stream


{-
cancelWrites : WritableStream reason value -> Task Never {}

closeWrites : WritableStream reason value -> Task Never {}
-}


-- Pair


type Transformation read write =
    -- Note: Implementation in kernel code
    Transformation read write


pipeThrough : Transformation input output -> Readable input -> Task Error (Readable output)
pipeThrough =
    Gren.Kernel.Stream.pipeThrough


pipeTo : Writable data -> Readable data -> Task Error {}
pipeTo =
    Gren.Kernel.Stream.pipeTo


makeIdentityTransformation : { readCapacity : Int, writeCapacity : Int } -> Task x (Transformation data data)
makeIdentityTransformation { readCapacity, writeCapacity } =
    Gren.Kernel.Stream.makeIdentityTransformation (max 0 readCapacity) (max 0 writeCapacity)


readable : Transformation read write -> Readable read
readable =
    Gren.Kernel.Stream.readable


writable : Transformation read write -> Writable write
writable =
    Gren.Kernel.Stream.writable
