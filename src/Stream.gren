module Stream exposing (..)


import Gren.Kernel.Stream
import Basics exposing (Bool, Int, (<|), (++), max)
import Bytes exposing (Bytes)
import String exposing (String)
import Task exposing (Task)


type Readable value
    = Readable


type Writeable value
    = Writeable


type Error
    = Closed
    | Cancelled String
    | Locked


-- Generic

{-
pipeThrough : StreamPair reasonP in out -> ReadableStream reasonR in -> Task (Error reason) (ReadableStream reasonP out)

pipeTo : WriteableStream reasonW in -> ReadableStream reasonR in -> Task (Error reason) {}


type alias Transformer reason state in out =
 (state -> in -> TransformAction reason state out)


type TransformAction reason state value
    = UpdateState state
    | Send
        { state : state
        , send : value
        }
    | Close
    | Cancel reason


createTransformStream : Transformer reason state in out -> Task Never (StreamPair reason in out)


-- Readable
-}


type alias ReadResult value =
    { streamClosed : Bool
    , value : value
    }


read : Readable value -> Task Error (ReadResult value)
read =
    Gren.Kernel.Stream.read

{-
cancelReads : ReadableStream reason value -> Task Never {}

closeReads : ReadableStream reason value -> Task Never {}
-}

-- Writeable


write : value -> Writeable value -> Task Error {}
write =
    Gren.Kernel.Stream.write


writeStringAsBytes : String -> Writeable Bytes -> Task Error {}
writeStringAsBytes str stream =
    write (Bytes.fromString str) stream


writeLineAsBytes : String -> Writeable Bytes -> Task Error {}
writeLineAsBytes str stream =
    write (Bytes.fromString <| str ++ "\n") stream


{-
cancelWrites : WriteableStream reason value -> Task Never {}

closeWrites : WriteableStream reason value -> Task Never {}
-}


-- Pair


type alias Pair data =
    { readable : Readable data
    , writable : Writeable data
    }


makePair : { readCapacity : Int, writeCapacity : Int } -> Task x (Pair data)
makePair { readCapacity, writeCapacity } =
    Gren.Kernel.Stream.makePair (max 0 readCapacity) (max 0 writeCapacity)
