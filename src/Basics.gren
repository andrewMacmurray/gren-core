module Basics exposing
    ( Int, (+), (-), (*), (/), (//), (^), negate
    , Float, toFloat, isNaN, isInfinite
    , (==), (/=)
    , (<), (>), (<=), (>=), max, min, clamp, compare, Order(..)
    , Bool(..), not, (&&), (||), xor
    , (++)
    , identity, (<|), (|>), (<<), (>>), Never, never
    )

{-| Tons of useful functions that get imported by default.


## Numbers

@docs Int, (+), (-), (*), (/), (//), (^), negate


## Float

@docs Float, toFloat, isNaN, isInfinite


## Equality

@docs (==), (/=)


## Comparison

These functions only work on `comparable` types. This includes numbers,
characters, strings and arrays of comparable things.

@docs Order, (<), (>), (<=), (>=), max, min, clamp, compare


## Booleans

@docs Bool, not, (&&), (||), xor


## Append Strings and Arrays

@docs (++)


## Function Helpers

@docs identity, (<|), (|>), (<<), (>>), Never, never

-}

import Gren.Kernel.Basics
import Gren.Kernel.Utils



-- INFIX OPERATORS


infix right 0 (<|) = apL
infix left  0 (|>) = apR
infix right 2 (||) = or
infix right 3 (&&) = and
infix non   4 (==) = eq
infix non   4 (/=) = neq
infix non   4 (<) = lt
infix non   4 (>) = gt
infix non   4 (<=) = le
infix non   4 (>=) = ge
infix right 5 (++) = append
infix left  6 (+) = add
infix left  6 (-) = sub
infix left  7 (*) = mul
infix left  7 (/) = fdiv
infix left  7 (//) = idiv
infix right 8 (^) = pow
infix left  9 (<<) = composeL
infix right 9 (>>) = composeR



-- MATHEMATICS


{-| An `Int` is a whole number. Valid syntax for integers includes:

    0

    42

    9000

    0xFF -- 255 in hexadecimal

    0x0A --  10 in hexadecimal

**Note:** `Int` math is well-defined in the range `-2^31` to `2^31 - 1`. Outside
of that range, the behavior is determined by the compilation target. When
generating JavaScript, the safe range expands to `-(2^53 - 1)` to `2^53 - 1` for some
operations, but if we generate WebAssembly some day, we would do the traditional
[integer overflow][io]. This quirk is necessary to get good performance on
quirky compilation targets.

**Historical Note:** The name `Int` comes from the term [integer]. It appears
that the `int` abbreviation was introduced in [ALGOL 68][68], shortening it
from `integer` in [ALGOL 60][60]. Today, almost all programming languages use
this abbreviation.

[io]: https://en.wikipedia.org/wiki/Integer_overflow
[integer]: https://en.wikipedia.org/wiki/Integer
[60]: https://en.wikipedia.org/wiki/ALGOL_60
[68]: https://en.wikipedia.org/wiki/ALGOL_68

-}
type Int
    = Int -- NOTE: The compiler provides the real implementation.


{-| A `Float` is a [floating-point number][fp]. Valid syntax for floats includes:

    0
    42
    3.14
    0.1234
    6.022e23   -- == (6.022 * 10^23)
    6.022e+23  -- == (6.022 * 10^23)
    1.602e−19  -- == (1.602 * 10^-19)
    1e3        -- == (1 * 10^3) == 1000

**Historical Note:** The particular details of floats (e.g. `NaN`) are
specified by [IEEE 754][ieee] which is literally hard-coded into almost all
CPUs in the world. That means if you think `NaN` is weird, you must
successfully overtake Intel and AMD with a chip that is not backwards
compatible with any widely-used assembly language.

[fp]: https://en.wikipedia.org/wiki/Floating-point_arithmetic
[ieee]: https://en.wikipedia.org/wiki/IEEE_754

-}
type Float
    = Float -- NOTE: The compiler provides the real implementation.


{-| Add two numbers. The `number` type variable means this operation can be
specialized to `Int -> Int -> Int` or to `Float -> Float -> Float`. So you
can do things like this:

    3002 + 4004 == 7006 -- all ints

    3.14 + 3.14 == 6.28 -- all floats

You _cannot_ add an `Int` and a `Float` directly though. Use functions like
[toFloat](#toFloat) or [round](#round) to convert both values to the same type.
So if you needed to add a array length to a `Float` for some reason, you
could say one of these:

    3.14 + toFloat (Array.length [ 1, 2, 3 ]) == 6.14

    round 3.14 + Array.length [ 1, 2, 3 ] == 6

**Note:** Languages like Java and JavaScript automatically convert `Int` values
to `Float` values when you mix and match. This can make it difficult to be sure
exactly what type of number you are dealing with. When you try to _infer_ these
conversions (as Scala does) it can be even more confusing. Gren has opted for a
design that makes all conversions explicit.

-}
add : number -> number -> number
add =
    Gren.Kernel.Basics.add


{-| Subtract numbers like `4 - 3 == 1`.

See [`(+)`](#+) for docs on the `number` type variable.

-}
sub : number -> number -> number
sub =
    Gren.Kernel.Basics.sub


{-| Multiply numbers like `2 * 3 == 6`.

See [`(+)`](#+) for docs on the `number` type variable.

-}
mul : number -> number -> number
mul =
    Gren.Kernel.Basics.mul


{-| Floating-point division:

    10 / 4 == 2.5

    11 / 4 == 2.75

    12 / 4 == 3

    13 / 4 == 3.25

    14
        / 4
        == 3.5
        - 1
        / 4
        == -0.25
        - 5
        / 4
        == -1.25

-}
fdiv : Float -> Float -> Float
fdiv =
    Gren.Kernel.Basics.fdiv


{-| Integer division:

    10 // 4 == 2

    11 // 4 == 2

    12 // 4 == 3

    13 // 4 == 3

    14
        // 4
        == 3
        - 1
        // 4
        == 0
        - 5
        // 4
        == -1

Notice that the remainder is discarded, so `3 // 4` is giving output
similar to `truncate (3 / 4)`.

It may sometimes be useful to pair this with the [`remainderBy`](#remainderBy)
function.

-}
idiv : Int -> Int -> Int
idiv =
    Gren.Kernel.Basics.idiv


{-| Exponentiation

    3 ^ 2 == 9

    3 ^ 3 == 27

-}
pow : number -> number -> number
pow =
    Gren.Kernel.Basics.pow


{-| Negate a number.

    negate 42 == -42

    negate -42 == 42

    negate 0 == 0

-}
negate : number -> number
negate n =
    -n


-- INT TO FLOAT / FLOAT TO INT


{-| Convert an integer into a float. Useful when mixing `Int` and `Float`
values like this:

    halfOf : Int -> Float
    halfOf number =
        toFloat number / 2

-}
toFloat : Int -> Float
toFloat =
    Gren.Kernel.Basics.toFloat



-- EQUALITY


{-| Check if values are &ldquo;the same&rdquo;.

**Note:** Gren uses structural equality on tuples, records, and user-defined
union types. This means the values `(3, 4)` and `(3, 4)` are definitely equal.
This is not true in languages like JavaScript that use reference equality on
objects.

**Note:** Do not use `(==)` with functions, JSON values from `gren/json`, or
regular expressions from `gren/regex`. It does not work. It will crash if
possible. With JSON values, decode to Gren values before doing any equality
checks!

Why is it like this? Equality in the Gren sense can be difficult or impossible
to compute. Proving that functions are the same is [undecidable], and JSON
values can come in through ports and have functions, cycles, and new JS data
types that interact weirdly with our equality implementation. In a future
release, the compiler will detect when `(==)` is used with problematic types
and provide a helpful error message at compile time. This will require some
pretty serious infrastructure work, so the stopgap is to crash as quickly as
possible.

[undecidable]: https://en.wikipedia.org/wiki/Undecidable_problem

-}
eq : a -> a -> Bool
eq =
    Gren.Kernel.Utils.equal


{-| Check if values are not &ldquo;the same&rdquo;.

So `(a /= b)` is the same as `(not (a == b))`.

-}
neq : a -> a -> Bool
neq =
    Gren.Kernel.Utils.notEqual



-- COMPARISONS


{-| -}
lt : comparable -> comparable -> Bool
lt =
    Gren.Kernel.Utils.lt


{-| -}
gt : comparable -> comparable -> Bool
gt =
    Gren.Kernel.Utils.gt


{-| -}
le : comparable -> comparable -> Bool
le =
    Gren.Kernel.Utils.le


{-| -}
ge : comparable -> comparable -> Bool
ge =
    Gren.Kernel.Utils.ge


{-| Find the smaller of two comparables.

    min 42 12345678 == 42

    min "abc" "xyz" == "abc"

-}
min : comparable -> comparable -> comparable
min x y =
    if lt x y then
        x

    else
        y


{-| Find the larger of two comparables.

    max 42 12345678 == 12345678

    max "abc" "xyz" == "xyz"

-}
max : comparable -> comparable -> comparable
max x y =
    if gt x y then
        x

    else
        y


{-| Clamps a number within a given range. With the expression
`clamp 100 200 x` the results are as follows:

    100     if x < 100
     x      if 100 <= x < 200
    200     if 200 <= x

-}
clamp : number -> number -> number -> number
clamp low high number =
    if lt number low then
        low

    else if gt number high then
        high

    else
        number


{-| Compare any two comparable values. Comparable values include `String`,
`Char`, `Int`, `Float`, or an array or tuple containing comparable values. These
are also the only values that work as `Dict` keys or `Set` members.

    compare 3 4 == LT

    compare 4 4 == EQ

    compare 5 4 == GT

-}
compare : comparable -> comparable -> Order
compare =
    Gren.Kernel.Utils.compare


{-| Represents the relative ordering of two things.
The relations are less than, equal to, and greater than.
-}
type Order
    = LT
    | EQ
    | GT



-- BOOLEANS


{-| A “Boolean” value. It can either be `True` or `False`.

**Note:** Programmers coming from JavaScript, Java, etc. tend to reach for
boolean values way too often in Gren. Using a [union type][ut] is often clearer
and more reliable. You can learn more about this from Jeremy [here][jf] or
from Richard [here][rt].

[ut]: https://guide.gren-lang.org/types/union_types.html
[jf]: https://youtu.be/6TDKHGtAxeg?t=1m25s
[rt]: https://youtu.be/IcgmSRJHu_8?t=1m14s

-}
type Bool
    = True
    | False


{-| Negate a boolean value.

    not True == False

    not False == True

-}
not : Bool -> Bool
not =
    Gren.Kernel.Basics.not


{-| The logical AND operator. `True` if both inputs are `True`.

    True && True == True

    True && False == False

    False && True == False

    False && False == False

**Note:** When used in the infix position, like `(left && right)`, the operator
short-circuits. This means if `left` is `False` we do not bother evaluating `right`
and just return `False` overall.

-}
and : Bool -> Bool -> Bool
and =
    Gren.Kernel.Basics.and


{-| The logical OR operator. `True` if one or both inputs are `True`.

    True || True == True

    True || False == True

    False || True == True

    False || False == False

**Note:** When used in the infix position, like `(left || right)`, the operator
short-circuits. This means if `left` is `True` we do not bother evaluating `right`
and just return `True` overall.

-}
or : Bool -> Bool -> Bool
or =
    Gren.Kernel.Basics.or


{-| The exclusive-or operator. `True` if exactly one input is `True`.

    xor True True == False

    xor True False == True

    xor False True == True

    xor False False == False

-}
xor : Bool -> Bool -> Bool
xor =
    Gren.Kernel.Basics.xor



-- APPEND


{-| Put two appendable things together. This includes strings and arrays.

    "hello" ++ "world" == "helloworld"

    [ 1, 1, 2 ] ++ [ 3, 5, 8 ] == [ 1, 1, 2, 3, 5, 8 ]

-}
append : appendable -> appendable -> appendable
append =
    Gren.Kernel.Utils.append



-- CRAZY FLOATS


{-| Determine whether a float is an undefined or unrepresentable number.
NaN stands for _not a number_ and it is [a standardized part of floating point
numbers](https://en.wikipedia.org/wiki/NaN).

    isNaN (0 / 0) == True

    isNaN (sqrt -1) == True

    isNaN (1 / 0) == False -- infinity is a number

    isNaN 1 == False

-}
isNaN : Float -> Bool
isNaN =
    Gren.Kernel.Basics.isNaN


{-| Determine whether a float is positive or negative infinity.

    isInfinite (0 / 0) == False

    isInfinite (sqrt -1) == False

    isInfinite (1 / 0) == True

    isInfinite 1 == False

Notice that NaN is not infinite! For float `n` to be finite implies that
`not (isInfinite n || isNaN n)` evaluates to `True`.

-}
isInfinite : Float -> Bool
isInfinite =
    Gren.Kernel.Basics.isInfinite



-- FUNCTION HELPERS


{-| Function composition, passing results along in the suggested direction. For
example, the following code checks if the result of rounding a float is odd:

    not << isEven << round

You can think of this operator as equivalent to the following:

    (g << f) == (\x -> g (f x))

So our example expands out to something like this:

    \n -> not (isEven (round n))

-}
composeL : (b -> c) -> (a -> b) -> (a -> c)
composeL g f =
    \x -> g (f x)


{-| Function composition, passing results along in the suggested direction. For
example, the following code checks if the result of rounding a float is odd:

    round >> isEven >> not

-}
composeR : (a -> b) -> (b -> c) -> (a -> c)
composeR f g =
    \x -> g (f x)


{-| Saying `x |> f` is exactly the same as `f x`.

It is called the “pipe” operator because it lets you write “pipelined” code.
For example, say we have a `sanitize` function for turning user input into
integers:

    -- BEFORE
    sanitize : String -> Maybe Int
    sanitize input =
        String.toInt (String.trim input)

We can rewrite it like this:

    -- AFTER
    sanitize : String -> Maybe Int
    sanitize input =
        input
            |> String.trim
            |> String.toInt

Totally equivalent! I recommend trying to rewrite code that uses `x |> f`
into code like `f x` until there are no pipes left. That can help you build
your intuition.

**Note:** This can be overused! I think folks find it quite neat, but when you
have three or four steps, the code often gets clearer if you break out a
top-level helper function. Now the transformation has a name. The arguments are
named. It has a type annotation. It is much more self-documenting that way!
Testing the logic gets easier too. Nice side benefit!

-}
apR : a -> (a -> b) -> b
apR x f =
    f x


{-| Saying `f <| x` is exactly the same as `f x`.

It can help you avoid parentheses, which can be nice sometimes. Maybe you want
to apply a function to a `case` expression? That sort of thing.

-}
apL : (a -> b) -> a -> b
apL f x =
    f x


{-| Given a value, returns exactly the same value. This is called
[the identity function](https://en.wikipedia.org/wiki/Identity_function).
-}
identity : a -> a
identity x =
    x


{-| A value that can never happen! For context:

  - The boolean type `Bool` has two values: `True` and `False`
  - The unit type `()` has one value: `()`
  - The never type `Never` has no values!

You may see it in the wild in `Html Never` which means this HTML will never
produce any messages. You would need to write an event handler like
`onClick ??? : Attribute Never` but how can we fill in the question marks?!
So there cannot be any event handlers on that HTML.

You may also see this used with tasks that never fail, like `Task Never ()`.

The `Never` type is useful for restricting _arguments_ to a function. Maybe my
API can only accept HTML without event handlers, so I require `Html Never` and
users can give `Html msg` and everything will go fine. Generally speaking, you
do not want `Never` in your return types though.

-}
type Never
    = JustOneMore Never


{-| A function that can never be called. Seems extremely pointless, but it
_can_ come in handy. Imagine you have some HTML that should never produce any
messages. And say you want to use it in some other HTML that _does_ produce
messages. You could say:

    import Html exposing (..)

    embedHtml : Html Never -> Html msg
    embedHtml staticStuff =
        div []
            [ text "hello"
            , Html.map never staticStuff
            ]

So the `never` function is basically telling the type system, make sure no one
ever calls me!

-}
never : Never -> a
never (JustOneMore nvr) =
    never nvr
