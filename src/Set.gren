module Set exposing
    ( Set
    , empty, singleton, set, remove, toggle
    , isEmpty, member, count, first, last, findFirst, findLast, any, all
    , union, intersect, diff
    , toArray, fromArray
    , map, foldl, foldr, filter, filterMap, partition
    )

{-| A set of unique values. The values can be any comparable type. This
includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or arrays
of comparable types.

Set, remove, and query operations all take _O(log n)_ time.


@docs Set


@docs empty, singleton, set, remove, toggle


## Query

@docs isEmpty, member, count, first, last, findFirst, findLast, any, all


## Combine

@docs union, intersect, diff


## Arrays

@docs toArray, fromArray


## Transform

@docs map, foldl, foldr, filter, filterMap, partition

-}

import Array exposing (Array)
import Basics exposing (..)
import Dict
import Maybe exposing (Maybe(..))


{-| Represents a set of unique values. So `(Set Int)` is a set of integers and
`(Set String)` is a set of strings.
-}
type Set t
    = Set_gren_builtin (Dict.Dict t {})


{-| Create an empty set.
-}
empty : Set a
empty =
    Set_gren_builtin Dict.empty


{-| Create a set with one value.
-}
singleton : comparable -> Set comparable
singleton key =
    Set_gren_builtin (Dict.singleton key {})


{-| Set a value into a set.
-}
set : comparable -> Set comparable -> Set comparable
set key (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.set key {} dict)


{-| Remove a value from a set. If the value is not found, no changes are made.
-}
remove : comparable -> Set comparable -> Set comparable
remove key (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.remove key dict)


{-| Toggle a value in a set. If the value isn't in the set, it is added. If the
value is in the set, it is removed.
-}
toggle : comparable -> Set comparable -> Set comparable
toggle key (Set_gren_builtin dict) =
    case Dict.get key dict of
        Just _ ->
            Set_gren_builtin <| Dict.remove key dict

        Nothing ->
            Set_gren_builtin <| Dict.set key {} dict


{-| Determine if a set is empty.
-}
isEmpty : Set a -> Bool
isEmpty (Set_gren_builtin dict) =
    Dict.isEmpty dict


{-| Determine if a value is in a set.
-}
member : comparable -> Set comparable -> Bool
member key (Set_gren_builtin dict) =
    Dict.member key dict


{-| Determine the number of elements in a set.
-}
count : Set a -> Int
count (Set_gren_builtin dict) =
    Dict.count dict


{-| Get the first element of the set.
-}
first : Set a -> Maybe a
first (Set_gren_builtin dict) =
    Maybe.map .key (Dict.first dict)


{-| Get the last element of the set.
-}
last : Set a -> Maybe a
last (Set_gren_builtin dict) =
    Maybe.map .key (Dict.last dict)


{-| Find the first value that passes the test.
-}
findFirst : (a -> Bool) -> Set a -> Maybe a
findFirst fn (Set_gren_builtin dict) =
    Maybe.map .key (Dict.findFirst (\key _ -> fn key) dict)


{-| Find the last value that passes the test.
-}
findLast : (a -> Bool) -> Set a -> Maybe a
findLast fn (Set_gren_builtin dict) =
    Maybe.map .key (Dict.findLast (\key _ -> fn key) dict)


{-| Checks if any value in the set passes the test.
-}
any : (a -> Bool) -> Set a -> Bool
any fn (Set_gren_builtin dict) =
    Dict.any (\key _ -> fn key) dict


{-| Checks if all values in the set passes the test.
-}
all : (a -> Bool) -> Set a -> Bool
all fn (Set_gren_builtin dict) =
    Dict.all (\key _ -> fn key) dict


{-| Get the union of two sets. Keep all values.
-}
union : Set comparable -> Set comparable -> Set comparable
union (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.union dict1 dict2)


{-| Get the intersection of two sets. Keeps values that appear in both sets.
-}
intersect : Set comparable -> Set comparable -> Set comparable
intersect (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.intersect dict1 dict2)


{-| Get the difference between the first set and the second. Keeps values
that do not appear in the second set.
-}
diff : Set comparable -> Set comparable -> Set comparable
diff (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.diff dict1 dict2)


{-| Convert a set into an array, sorted from lowest to highest.
-}
toArray : Set a -> Array a
toArray (Set_gren_builtin dict) =
    Dict.keys dict


{-| Convert an array into a set, removing any duplicates.
-}
fromArray : Array comparable -> Set comparable
fromArray array =
    Array.foldl set empty array


{-| Fold over the values in a set, in order from lowest to highest.
-}
foldl : (a -> b -> b) -> b -> Set a -> b
foldl func initialState (Set_gren_builtin dict) =
    Dict.foldl (\key _ state -> func key state) initialState dict


{-| Fold over the values in a set, in order from highest to lowest.
-}
foldr : (a -> b -> b) -> b -> Set a -> b
foldr func initialState (Set_gren_builtin dict) =
    Dict.foldr (\key _ state -> func key state) initialState dict


{-| Map a function onto a set, creating a new set with no duplicates.
-}
map : (comparable -> comparable2) -> Set comparable -> Set comparable2
map func coll =
    foldl (\x xs -> set (func x) xs) empty coll


{-| Only keep elements that pass the given test.

    import Set exposing (Set)

    numbers : Set Int
    numbers =
        Set.fromArray [ -2, -1, 0, 1, 2 ]

    positives : Set Int
    positives =
        Set.filter (\x -> x > 0) numbers

    -- positives == Set.fromArray [1,2]

-}
filter : (comparable -> Bool) -> Set comparable -> Set comparable
filter isGood (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.filter (\key _ -> isGood key) dict)


{-| Filter out unwanted results of a map operation.
    
    import Set

    strings : Set String
    strings =
        Set.fromArray [ "3", "not a number", "-5" ]

    numbers : Set Int
    numbers =
        Set.filterMap String.toInt strings

    -- numbers == Set.fromArray [ 3, -5 ]
-}
filterMap : (comparable -> Maybe comparable2) -> Set comparable -> Set comparable2
filterMap toMaybe coll =
    foldl
        (\old news ->
            case toMaybe old of
                Just new ->
                    set new news

                Nothing ->
                    news
        )
        empty
        coll


{-| Create two new sets. The first contains all the elements that passed the
given test, and the second contains all the elements that did not.
-}
partition : (comparable -> Bool) -> Set comparable -> { trues : Set comparable, falses : Set comparable }
partition isGood (Set_gren_builtin dict) =
    let
        { trues, falses } =
            Dict.partition (\key _ -> isGood key) dict
    in
    { trues = Set_gren_builtin trues
    , falses = Set_gren_builtin falses
    }
