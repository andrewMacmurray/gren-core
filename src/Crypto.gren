module Crypto exposing ( randomUuid, getRandomValues )

{-| 

@docs randomUuid

-}

import Basics exposing ( Int, (<=) )
import Gren.Kernel.Crypto
import Task exposing ( Task )
import String exposing ( String )
import Array exposing ( Array )


{-| Get a random UUID.
-}
randomUuid : Task x String
randomUuid =
    Gren.Kernel.Crypto.randomUUID


{-| Get an `Array` of random values equal in length to the passed `Int`.

If the passed `Int` is `0` or less, the task will resolve into an empty `Array`. 
-}
getRandomValues : Int -> Task x (Array String)
getRandomValues int =
    if int <= 0 then
        Task.succeed []
    else
        Gren.Kernel.Crypto.getRandomValues int
