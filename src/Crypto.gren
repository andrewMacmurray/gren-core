module Crypto exposing ( Context(..), randomUuid, getRandomValues, getContext )

{-| 

@docs Context

@docs randomUuid, getRandomValues, getContext

-}

import Array exposing ( Array )
import Basics exposing ( Int, (<=) )
import Gren.Kernel.Crypto
import String exposing ( String )
import Task exposing ( Task )


{-|-}
type Context
    = SecureContext
    | InsecureContext


{-| Get a random UUID.
-}
randomUuid : Task x String
randomUuid =
    Gren.Kernel.Crypto.randomUUID


{-| Get an `Array` of random values equal in length to the passed `Int`.

If the passed `Int` is `0` or less, the task will resolve into an empty `Array`. 
-}
getRandomValues : Int -> Task x (Array String)
getRandomValues int =
    if int <= 0 then
        Task.succeed []
    else
        Gren.Kernel.Crypto.getRandomValues int


{-|-}
getContext : Task x Context
getContext =
    Gren.Kernel.Crypto.getContext
