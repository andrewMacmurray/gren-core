module Dict exposing
    ( Dict
    , empty, singleton, set, update, updateWithDefault, remove
    , isEmpty, count, get, member, first, last, findFirst, findLast, any, all
    , keys, values
    , map, foldl, foldr, keepIf, mapAndKeepJust, partition
    , union, intersect, diff, merge
    )

{-| A dictionary mapping unique keys to values. The keys can be any comparable
type. This includes `Int`, `Float`, `Time`, `Char` and `String`.

Set, remove, and query operations all take _O(log n)_ time.


@docs Dict


@docs empty, singleton, set, update, updateWithDefault, remove


## Query

@docs isEmpty, count, get, member, first, last, findFirst, findLast, any, all


## Arrays

@docs keys, values


## Transform

@docs map, foldl, foldr, keepIf, mapAndKeepJust, partition


## Combine

@docs union, intersect, diff, merge

-}


import Array exposing (Array)
import Basics exposing (..)
import Maybe exposing (..)



-- DICTIONARIES
-- The color of a node. Leaves are considered Black.


type NColor
    = Red
    | Black


{-| A dictionary of keys and values. So a `Dict String User` is a dictionary
that lets you look up a `String` (such as user names) and find the associated
`User`.

    import Dict exposing ( Dict )

    users : Dict String User
    users =
        Dict.empty
            |> Dict.set "Alice" (makeUser "Alice" 28 1.65)
            |> Dict.set "Bob" (makeUser "Bob" 19 1.82)
            |> Dict.set "Chuck" (makeUser "Chuck" 33 1.75)

    type alias User =
        { name : String
        , age : Int
        , height : Float
        }

    makeUser : String -> Int -> Float -> User
    makeUser name age height =
        { name = name
        , age = age
        , height = height
        }
-}
type Dict k v
    = RBNode_gren_builtin { color : NColor, key : k, value : v, left : (Dict k v), right : (Dict k v) }
    | RBEmpty_gren_builtin


{-| Create an empty dictionary.
-}
empty : Dict k v
empty =
    RBEmpty_gren_builtin


node : NColor -> k -> v -> Dict k v -> Dict k v -> Dict k v
node color key value left right =
    RBNode_gren_builtin
        { color = color
        , key = key
        , value = value
        , left = left
        , right = right
        }


{-| Get the value associated with a key. If the key is not found, return
`Nothing`. This is useful when you are not sure if a key will be in the
dictionary.

    animals = Dict.empty |> Dict.set "Tom" Cat |> Dict.set "Jerry" Mouse

    get "Tom"   animals == Just Cat
    get "Jerry" animals == Just Mouse
    get "Spike" animals == Nothing

-}
get : comparable -> Dict comparable v -> Maybe v
get targetKey dict =
    when dict is
        RBEmpty_gren_builtin ->
            Nothing

        RBNode_gren_builtin { key, value, left, right } ->
            when compare targetKey key is
                LT ->
                    get targetKey left

                EQ ->
                    Just value

                GT ->
                    get targetKey right


{-| Determine if a key is in a dictionary.
-}
member : comparable -> Dict comparable v -> Bool
member key dict =
    when get key dict is
        Just _ ->
            True

        Nothing ->
            False


{-| Determine the number of key-value pairs in the dictionary.
-}
count : Dict k v -> Int
count dict =
    countHelp 0 dict


countHelp : Int -> Dict k v -> Int
countHelp n dict =
    when dict is
        RBEmpty_gren_builtin ->
            n

        RBNode_gren_builtin { left, right } ->
            countHelp (countHelp (n + 1) right) left


{-| Retrieve the first, or lowest, key-value pair.
-}
first : Dict k v -> Maybe { key : k, value : v }
first dict =
    when dict is
        RBEmpty_gren_builtin ->
            Nothing

        RBNode_gren_builtin { key, value, left = RBEmpty_gren_builtin } ->
            Just { key = key, value = value }

        RBNode_gren_builtin { left } ->
            first left


{-| Retrieve the last, or highest, key-value pair.
-}
last : Dict k v -> Maybe { key : k, value : v }
last dict =
    when dict is
        RBEmpty_gren_builtin ->
            Nothing

        RBNode_gren_builtin { key, value, right = RBEmpty_gren_builtin } ->
            Just { key = key, value = value }

        RBNode_gren_builtin { right } ->
            last right


{-| Find the first key-value pair that passes the test.
-}
findFirst : (k -> v -> Bool) -> Dict k v -> Maybe { key : k, value : v }
findFirst fn dict =
    when dict is
        RBEmpty_gren_builtin ->
            Nothing

        RBNode_gren_builtin { key, value, left, right } ->
            when findFirst fn left is
                Nothing ->
                    if fn key value then
                        Just { key = key, value = value }

                    else
                        findFirst fn right

                foundValue ->
                    foundValue


{-| Find the last key-value pair that passes the test.
-}
findLast : (k -> v -> Bool) -> Dict k v -> Maybe { key : k, value : v }
findLast fn dict =
    when dict is
        RBEmpty_gren_builtin ->
            Nothing

        RBNode_gren_builtin { key, value, left, right } ->
            when findLast fn right is
                Nothing ->
                    if fn key value then
                        Just { key = key, value = value }

                    else
                        findLast fn left

                foundValue ->
                    foundValue


{-| Checks if any key-value pair in the dictionary passes the test.
-}
any : (k -> v -> Bool) -> Dict k v -> Bool
any fn dict =
    when findFirst fn dict is
        Just _ ->
            True

        Nothing ->
            False


{-| Checks if all key-value pairs in the dictionary passes the test.
-}
all : (k -> v -> Bool) -> Dict k v -> Bool
all fn dict =
    when findFirst (\key value -> not <| fn key value) dict is
        Just _ ->
            False

        Nothing ->
            True


{-| Determine if a dictionary is empty.

    isEmpty empty == True

-}
isEmpty : Dict k v -> Bool
isEmpty dict =
    when dict is
        RBEmpty_gren_builtin ->
            True

        RBNode_gren_builtin _ ->
            False


{-| Sets a value for a given key. Existing values will be replaced.
If the key isn't already registered, the key-value pair will be inserted.
-}
set : comparable -> v -> Dict comparable v -> Dict comparable v
set setKey setValue dict =
    -- Root node is always Black
    when setHelp setKey setValue dict is
        RBNode_gren_builtin { color = Red, key, value, left, right } ->
            node Black key value left right

        x ->
            x


setHelp : comparable -> v -> Dict comparable v -> Dict comparable v
setHelp key value dict =
    when dict is
        RBEmpty_gren_builtin ->
            -- New nodes are always red. If it violates the rules, it will be fixed
            -- when balancing.
            node Red key value RBEmpty_gren_builtin RBEmpty_gren_builtin

        RBNode_gren_builtin { color = nColor, key = nKey, value = nValue, left =  nLeft, right = nRight } ->
            when compare key nKey is
                LT ->
                    balance nColor nKey nValue (setHelp key value nLeft) nRight

                EQ ->
                    node nColor nKey value nLeft nRight

                GT ->
                    balance nColor nKey nValue nLeft (setHelp key value nRight)


balance : NColor -> k -> v -> Dict k v -> Dict k v -> Dict k v
balance color key value left right =
    when right is
        RBNode_gren_builtin { color = Red, key = rK, value = rV, left = rLeft, right = rRight } ->
            when left is
                RBNode_gren_builtin { color = Red, key = lK, value = lV, left = lLeft, right = lRight } ->
                    node Red key value (node Black lK lV lLeft lRight) (node Black rK rV rLeft rRight)

                _ ->
                    node color rK rV (node Red key value left rLeft) rRight

        _ ->
            when left is
                RBNode_gren_builtin { color = Red, key = lK, value = lV, left = RBNode_gren_builtin { color = Red, key = llK, value = llV, left = llLeft, right = llRight }, right = lRight } ->
                    node Red lK lV (node Black llK llV llLeft llRight) (node Black key value lRight right)

                _ ->
                    node color key value left right


{-| Remove a key-value pair from a dictionary. If the key is not found,
no changes are made.
-}
remove : comparable -> Dict comparable v -> Dict comparable v
remove key dict =
    -- Root node is always Black
    when removeHelp key dict is
        RBNode_gren_builtin { color = Red, key = nKey, value, left, right } ->
            node Black nKey value left right

        x ->
            x


{-| The easiest thing to remove from the tree, is a red node. However, when searching for the
node to remove, we have no way of knowing if it will be red or not. This remove implementation
makes sure that the bottom node is red by moving red colors down the tree through rotation
and color flips. Any violations this will cause, can easily be fixed by balancing on the way
up again.
-}
removeHelp : comparable -> Dict comparable v -> Dict comparable v
removeHelp targetKey dict =
    when dict is
        RBEmpty_gren_builtin ->
            RBEmpty_gren_builtin

        RBNode_gren_builtin { color, key, value, left, right } ->
            if targetKey < key then
                when left is
                    RBNode_gren_builtin { color = Black, left = lLeft } ->
                        when lLeft is
                            RBNode_gren_builtin { color = Red } ->
                                node color key value (removeHelp targetKey left) right

                            _ ->
                                when moveRedLeft dict is
                                    RBNode_gren_builtin { color = nColor, key = nKey, value = nValue, left = nLeft, right = nRight } ->
                                        balance nColor nKey nValue (removeHelp targetKey nLeft) nRight

                                    RBEmpty_gren_builtin ->
                                        RBEmpty_gren_builtin

                    _ ->
                        node color key value (removeHelp targetKey left) right

            else
                removeHelpEQGT targetKey (removeHelpPrepEQGT targetKey dict color key value left right)


removeHelpPrepEQGT : comparable -> Dict comparable v -> NColor -> comparable -> v -> Dict comparable v -> Dict comparable v -> Dict comparable v
removeHelpPrepEQGT targetKey dict color key value left right =
    when left is
        RBNode_gren_builtin { color = Red, key = lK, value = lV, left = lLeft, right = lRight } ->
            node color lK lV lLeft (node Red key value lRight right)

        _ ->
            when right is
                RBNode_gren_builtin { color = Black, left = RBNode_gren_builtin { color = Black } } ->
                    moveRedRight dict

                RBNode_gren_builtin { color = Black, left = RBEmpty_gren_builtin } ->
                    moveRedRight dict

                _ ->
                    dict


{-| When we find the node we are looking for, we can remove by replacing the key-value
pair with the key-value pair of the left-most node on the right side (the closest pair).
-}
removeHelpEQGT : comparable -> Dict comparable v -> Dict comparable v
removeHelpEQGT targetKey dict =
    when dict is
        RBNode_gren_builtin { color, key, value, left, right } ->
            if targetKey == key then
                when getMin right is
                    RBNode_gren_builtin { key = minKey, value = minValue } ->
                        balance color minKey minValue left (removeMin right)

                    RBEmpty_gren_builtin ->
                        RBEmpty_gren_builtin

            else
                balance color key value left (removeHelp targetKey right)

        RBEmpty_gren_builtin ->
            RBEmpty_gren_builtin


getMin : Dict k v -> Dict k v
getMin dict =
    when dict is
        RBNode_gren_builtin { left = ((RBNode_gren_builtin _) as left) } ->
            getMin left

        _ ->
            dict


removeMin : Dict k v -> Dict k v
removeMin dict =
    when dict is
        RBNode_gren_builtin { color, key, value, left = ((RBNode_gren_builtin { color = lColor, left = lLeft }) as left), right } ->
            when lColor is
                Black ->
                    when lLeft is
                        RBNode_gren_builtin { color = Red } ->
                            node color key value (removeMin left) right

                        _ ->
                            when moveRedLeft dict is
                                RBNode_gren_builtin { color = nColor, key = nKey, value = nValue, left = nLeft, right = nRight } ->
                                    balance nColor nKey nValue (removeMin nLeft) nRight

                                RBEmpty_gren_builtin ->
                                    RBEmpty_gren_builtin

                _ ->
                    node color key value (removeMin left) right

        _ ->
            RBEmpty_gren_builtin


moveRedLeft : Dict k v -> Dict k v
moveRedLeft dict =
    when dict is
        RBNode_gren_builtin { color = clr, key = k, value = v, left = RBNode_gren_builtin { color = lClr, key = lK, value = lV, left = lLeft, right = lRight }, right = RBNode_gren_builtin { color = rClr, key = rK, value = rV, left = (RBNode_gren_builtin { color = Red, key = rlK, value = rlV, left = rlL, right = rlR }) as rLeft, right = rRight } } ->
            node
                Red
                rlK
                rlV
                (node Black k v (node Red lK lV lLeft lRight) rlL)
                (node Black rK rV rlR rRight)

        RBNode_gren_builtin { color = clr, key = k, value = v, left = RBNode_gren_builtin { color = lClr, key = lK, value = lV, left = lLeft, right = lRight }, right = RBNode_gren_builtin { color = rClr, key = rK, value = rV, left = rLeft, right = rRight } } ->
            node
                Black
                k
                v
                (node Red lK lV lLeft lRight)
                (node Red rK rV rLeft rRight)

        _ ->
            dict


moveRedRight : Dict k v -> Dict k v
moveRedRight dict =
    when dict is
        RBNode_gren_builtin { color = clr, key = k, value = v, left = RBNode_gren_builtin { color = lClr, key = lK, value = lV, left = RBNode_gren_builtin { color = Red, key = llK, value = llV, left = llLeft, right = llRight }, right = lRight }, right = RBNode_gren_builtin { color = rClr, key = rK, value = rV, left = rLeft, right = rRight } } ->
            node
                Red
                lK
                lV
                (node Black llK llV llLeft llRight)
                (node Black k v lRight (node Red rK rV rLeft rRight))

        RBNode_gren_builtin { color = clr, key = k, value = v, left = RBNode_gren_builtin { color = lClr, key = lK, value = lV, left = lLeft, right = lRight }, right = RBNode_gren_builtin { color = rClr, key = rK, value = rV, left = rLeft, right = rRight } } ->
            node
                Black
                k
                v
                (node Red lK lV lLeft lRight)
                (node Red rK rV rLeft rRight)

        _ ->
            dict


{-| Update the value of a dictionary for a specific key with a given function.
-}
update : comparable -> (Maybe v -> Maybe v) -> Dict comparable v -> Dict comparable v
update targetKey alter dictionary =
    when alter (get targetKey dictionary) is
        Just value ->
            set targetKey value dictionary

        Nothing ->
            remove targetKey dictionary


{-| Same as [update](#update) but if the key doesn't exist in the dictionary, a default value
is passed to the provided update function instead of a `Maybe`.
-}
updateWithDefault : comparable -> v -> (v -> v) -> Dict comparable v -> Dict comparable v
updateWithDefault targetKey defaultValue alter dictionary =
    when get targetKey dictionary is
        Just value ->
            set targetKey (alter value) dictionary

        Nothing ->
            set targetKey (alter defaultValue) dictionary


{-| Create a dictionary with one key-value pair.
-}
singleton : comparable -> v -> Dict comparable v
singleton key value =
    -- Root node is always Black
    node Black key value RBEmpty_gren_builtin RBEmpty_gren_builtin



-- COMBINE


{-| Combine two dictionaries. If there is a collision, preference is given
to the first dictionary.
-}
union : Dict comparable v -> Dict comparable v -> Dict comparable v
union t1 t2 =
    foldl set t2 t1


{-| Keep a key-value pair when its key appears in the second dictionary.
Preference is given to values in the first dictionary.
-}
intersect : Dict comparable v -> Dict comparable v -> Dict comparable v
intersect t1 t2 =
    keepIf (\k _ -> member k t2) t1


{-| Keep a key-value pair when its key does not appear in the second dictionary.
-}
diff : Dict comparable a -> Dict comparable b -> Dict comparable a
diff t1 t2 =
    foldl (\k v t -> remove k t) t1 t2



-- TRANSFORM


{-| Apply a function to all values in a dictionary.
-}
map : (k -> a -> b) -> Dict k a -> Dict k b
map func dict =
    when dict is
        RBEmpty_gren_builtin ->
            RBEmpty_gren_builtin

        RBNode_gren_builtin { color, key, value, left, right } ->
            node color key (func key value) (map func left) (map func right)


{-| Fold over the key-value pairs in a dictionary from lowest key to highest key.

    import Dict exposing (Dict)

    getAges : Dict String User -> Array String
    getAges users =
        Dict.foldl addAge [] users

    addAge : String -> User -> Array String -> Array String
    addAge _ user ages =
        user.age :: ages

    -- getAges users == [33,19,28]

-}
foldl : (k -> v -> b -> b) -> b -> Dict k v -> b
foldl func acc dict =
    when dict is
        RBEmpty_gren_builtin ->
            acc

        RBNode_gren_builtin { key, value, left, right } ->
            foldl func (func key value (foldl func acc left)) right


{-| Fold over the key-value pairs in a dictionary from highest key to lowest key.

    import Dict exposing (Dict)

    getAges : Dict String User -> Array String
    getAges users =
        Dict.foldr addAge [] users

    addAge : String -> User -> Array String -> Array String
    addAge _ user ages =
        user.age :: ages

    -- getAges users == [28,19,33]

-}
foldr : (k -> v -> b -> b) -> b -> Dict k v -> b
foldr func acc t =
    when t is
        RBEmpty_gren_builtin ->
            acc

        RBNode_gren_builtin { key, value, left, right } ->
            foldr func (func key value (foldr func acc right)) left


{-| Keep only the key-value pairs that pass the given test.
-}
keepIf : (comparable -> v -> Bool) -> Dict comparable v -> Dict comparable v
keepIf isGood dict =
    foldl
        (\k v d ->
            if isGood k v then
                set k v d

            else
                d
        )
        empty
        dict


{-| Remove unwanted results of a map operation.
-}
mapAndKeepJust : (comparable -> v -> Maybe x) -> Dict comparable v -> Dict comparable x
mapAndKeepJust toMaybe dict =
    foldl
        (\k v d ->
            when toMaybe k v is
                Just newValue ->
                    set k newValue d

                Nothing ->
                    d
        )
        empty
        dict


{-| Partition a dictionary according to some test. The first dictionary
contains all key-value pairs which passed the test, and the second contains
the pairs that did not.
-}
partition : (comparable -> v -> Bool) -> Dict comparable v -> { trues : Dict comparable v, falses : Dict comparable v }
partition isGood dict =
    let
        add key value { trues, falses } =
            if isGood key value then
                { trues = set key value trues
                , falses = falses
                }

            else
                { trues = trues
                , falses = set key value falses
                }
    in
    foldl add { trues = empty, falses = empty } dict



-- ARRAYS


{-| Get all of the keys in a dictionary, sorted from lowest to highest.

    keys (Dict.empty |> Dict.set 0 "Alice" |> Dict.set 1 "Bob") == [ 0, 1 ]

-}
keys : Dict k v -> Array k
keys dict =
    foldl (\key value keyArray -> Array.pushLast key keyArray) [] dict


{-| Get all of the values in a dictionary, in the order of their keys.

    values (Dict.empty |> Dict.set 0 "Alice" |> Dict.set 1 "Bob") == [ "Alice", "Bob" ]

-}
values : Dict k v -> Array v
values dict =
    foldl (\key value valueArray -> Array.pushLast value valueArray) [] dict


{-| The most general way of combining two dictionaries. You provide three
accumulators for when a given key appears:

1.  Only in the left dictionary.
2.  In both dictionaries.
3.  Only in the right dictionary.
    You then traverse all the keys from lowest to highest, building up whatever
    you want.

-}
merge :
    (comparable -> a -> result -> result)
    -> (comparable -> a -> b -> result -> result)
    -> (comparable -> b -> result -> result)
    -> Dict comparable a
    -> Dict comparable b
    -> result
    -> result
merge leftStep bothStep rightStep leftDict rightDict initialResult =
    let
        stepState rKey rValue { array, result } =
            when Array.popFirst array is
                Nothing ->
                    { array = array
                    , result = rightStep rKey rValue result
                    }

                Just { first = { key = lKey, value = lValue }, rest } ->
                    if lKey < rKey then
                        stepState rKey rValue 
                            { array = rest
                            , result = leftStep lKey lValue result
                            }

                    else if lKey > rKey then
                        { array = array
                        , result = rightStep rKey rValue result
                        }

                    else
                        { array = rest
                        , result = bothStep lKey lValue rValue result
                        }

        { array = leftovers, result = intermediateResult } =
            foldl stepState { array = foldl (\key value array -> Array.pushLast { key = key, value = value } array) [] leftDict, result = initialResult } rightDict
    in
    Array.foldl (\{ key, value } result -> leftStep key value result) intermediateResult leftovers
