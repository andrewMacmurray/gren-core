module Array exposing
    ( Array
    , empty, singleton, initialize, repeat, range
    , map, indexedMap, foldl, foldr, indexedFoldl, indexedFoldr, filter, filterMap, reverse
    , isEmpty, length, get, findFirst, findLast, member, any, all, minimum, maximum
    , set, update, pushFirst, pushLast
    , prepend, append, flatten, flatMap, intersperse, map2, map3
    , first, last, slice, dropFirst, dropLast, takeFirst, takeLast, popFirst, popLast, partition
    , sort, sortBy, sortWith
    )

{-| You can create an `Array` using the `[1, 2, 3]` syntax. This module has a bunch of
functions to help you work with them.

@docs Array


@docs empty, singleton, initialize, repeat, range


## Transform

@docs map, indexedMap, foldl, foldr, indexedFoldl, indexedFoldr, filter, filterMap, reverse


## Query

@docs isEmpty, length, get, findFirst, findLast, member, any, all, minimum, maximum


## Modify

@docs set, update, pushFirst, pushLast


## Combine

@docs prepend, append, flatten, flatMap, intersperse, map2, map3


## Deconstruct

@docs slice, dropFirst, dropLast, takeFirst, takeLast, popFirst, popLast, first, last, partition


## Sort

@docs sort, sortBy, sortWith


-}

import Basics exposing (..)
import Maybe exposing (Maybe(..))
import Gren.Kernel.Array


{-| An Array is an ordered collection of elements.
-}
type Array a
    = Array a


-- CREATE


{-| An empty array.
-}
empty : Array a
empty =
    []


{-| Create an array containing a single value.
-}
singleton : a -> Array a
singleton a =
    [ a ]


{-| Create an array of `n` elements, containing the elements
resulting from calling `fn` with `offset + index`.

    initialize 3 5 identity == [ 5, 6, 7 ]

In the above example, we create an array containing 3 integers
starting at 5.
-}
initialize : Int -> Int -> (Int -> a) -> Array a
initialize =
    Gren.Kernel.Array.initialize


{-| Create an array with `n` copies of a value:

    repeat 5 3 == [ 3, 3, 3, 3, 3 ]

-}
repeat : Int -> a -> Array a
repeat n val =
    initialize n 0 (\_ -> val)


{-| Create an array of numbers, every element increasing by one. You give the lowest and highest number that should be in the array.

    range 3 6 == [3, 4, 5, 6]
    range 3 3 == [3]
    range 6 3 == []

-}
range : Int -> Int -> Array Int
range from to =
    if from > to then
        []

    else if from == to then
        [from]

    else 
        initialize (to - from + 1) from identity


-- TRANSFORM


{-| Apply a function on every element in an array.

    map negate [ 1, 4, 9 ] == [ -1, -4, -9 ]

So `map func [ a, b, c ]` is the same as `[ func a, func b, func c ]`

-}
map : (a -> b) -> Array a -> Array b
map =
    Gren.Kernel.Array.map


{-| Same as `map` but the function is also applied to the index of each element.

    indexedMap (\idx val -> [idx, val]) [ 3, 3, 3 ] == [ [ 0, 3 ], [ 1, 3 ], [ 2, 3 ] ]

-}
indexedMap : (Int -> a -> b) -> Array a -> Array b
indexedMap =
    Gren.Kernel.Array.indexedMap


{-| Reduce the array from the left.

    foldl (+) 0 [ 1, 2, 3 ] == 6

So `foldl step state [ 1, 2, 3 ]` is like saying:

    state
        |> step 1
        |> step 2
        |> step 3
-}
foldl : (a -> b -> b) -> b -> Array a -> b
foldl =
    Gren.Kernel.Array.foldl


{-| Reduce the array from the right. Same as `foldl` but
the execution order is reversed.
-}
foldr : (a -> b -> b) -> b -> Array a -> b
foldr =
    Gren.Kernel.Array.foldr


{-| Reduce the array from the left. The reducing function is 
passed the index of the current value.

    indexedFoldl (\idx val sum -> idx + val + sum) 0 [ 1, 2, 3 ] == 9

-}
indexedFoldl : (Int -> a -> b -> b) -> b -> Array a -> b
indexedFoldl =
    Gren.Kernel.Array.indexedFoldl


{-| Reduce the array from the right. The reducing function
is passed the index of the current value. Same as `indexedFoldl`
but the execution order is reversed.
-}
indexedFoldr : (Int -> a -> b -> b) -> b -> Array a -> b
indexedFoldr =
    Gren.Kernel.Array.indexedFoldr


{-| Keep values that pass the test.

    filter (\n -> n < 3) [ 1, 2, 3, 4 ] == [ 1, 2 ]

-}
filter : (a -> Bool) -> Array a -> Array a
filter =
    Gren.Kernel.Array.filter


{-| Filter out unwanted results of a map operation.

    filterMap String.toInt [ "3", "not a number", "-5" ] == [ 3, -5 ]
    filterMap identity [ Just 1, Nothing ] == [ 1 ]

-}
filterMap : (a -> Maybe b) -> Array a -> Array b
filterMap mapper array =
    flatMap
        (\v ->
            case mapper v of
                Just newValue ->
                    [ newValue ]

                Nothing ->
                    []
        )
        array


{-| Reverse an array.

    reverse [ 1, 2, 3 ] == [ 3, 2, 1 ]

-}
reverse : Array a -> Array a
reverse =
    Gren.Kernel.Array.reverse


-- QUERY


{-| Check if an array is empty.

    isEmpty [] == True
    isEmpty [ 1, 2, 3 ] == False

-}
isEmpty : Array a -> Bool
isEmpty array =
    length array == 0


{-| Return the length of an array.

    length [ 1, 2, 3 ] == 3

-}
length : Array a -> Int
length =
    Gren.Kernel.Array.length


{-| Retrieve the element at a given index, or `Nothing` if the index is out of bounds.
A negative index looks up an element in reverse from the end of the array.

    get 1 [ 1, 2, 3 ] == Just 2
    get 10 [ 1, 2, 3 ] == Nothing
    get -1 [ 1, 2, 3 ] == Just 3

-}
get : Int -> Array a -> Maybe a
get =
    Gren.Kernel.Array.get


{-| Find the first value that passes the test.

    find (\n -> n > 0) [ -1, 0, 1, 2 ] == Just 1

-}
findFirst : (a -> Bool) -> Array a -> Maybe a
findFirst =
    Gren.Kernel.Array.findFirst


{-| Find the last value that passes the test.

    find (\n -> n > 0) [ -1, 0, 1, 2 ] == Just 2

-}
findLast : (a -> Bool) -> Array a -> Maybe a
findLast =
    Gren.Kernel.Array.findLast


{-| Figure out whether an array contains a value.

    member 9 [1,2,3,4] == False
    member 4 [1,2,3,4] == True

-}
member : a -> Array a -> Bool
member value array =
    case findFirst (\v -> v == value) array of
        Just _ ->
            True

        Nothing ->
            False


{-| Determine if any elements pass the test.

    any isEven [2,3] == True
    any isEven [1,3] == False
    any isEven [] == False

-}
any : (a -> Bool) -> Array a -> Bool
any fn array =
    case findFirst fn array of
        Just _ ->
            True

        Nothing ->
            False


{-| Determine if all elements pass the test.

    all isEven [2,4] == True
    all isEven [2,3] == False
    all isEven [] == True

-}
all : (a -> Bool) -> Array a -> Bool
all fn array =
    case findFirst (not << fn) array of
        Just _ ->
            False

        Nothing ->
            True


{-| Find the minimum element in a non-empty array.

    minimum [3,2,1] == Just 1
    minimum []      == Nothing

-}
minimum : Array comparable -> Maybe comparable
minimum array =
    case first array of
        Nothing ->
            Nothing

        Just val ->
            Just <|
                foldl
                    (\current lowest ->
                        if current < lowest then
                            current

                        else
                            lowest
                    )
                    val
                    array


{-| Find the maximum element in a non-empty array.

    maximum [3,2,1] == Just 3
    maximum []      == Nothing

-}
maximum : Array comparable -> Maybe comparable
maximum array =
    case first array of
        Nothing ->
            Nothing

        Just val ->
            Just <|
                foldl
                    (\current highest ->
                        if current > highest then
                            current

                        else
                            highest
                    )
                    val
                    array


-- MODIFY


{-| Replaces the element at the given index, or returns the array unmodified if the index is out of bounds.
Passing a negative index means you want to replace an element counting backwards from the end of the array.

    set 1 10 [ 1, 2, 3 ] == [ 1, 10, 3 ]
    set 10 10 [ 1, 2, 3 ] == [ 1, 2, 3 ]
    set -1 10 [ 1, 2, 3 ] == [ 1, 2, 10 ]

-}
set : Int -> a -> Array a -> Array a
set =
    Gren.Kernel.Array.set


{-| Update a value at the given index using a function. If the index is out of bounds, nothing happens.

    update 1 (\n -> n + 1) [ 1, 2, 3 ] == [ 1, 3, 3 ]
    update 10 (\n -> n + 1) [ 1, 2, 3 ] == [ 1, 2, 3 ]

-}
update : Int -> (a -> a) -> Array a -> Array a
update idx fn array =
    case get idx array of
        Nothing ->
            array

        Just val ->
            set idx (fn val) array


{-| Add a value to the start of the array.

    pushFirst 1 []          == [ 1 ]
    pushFirst 5 [ 1, 4, 9 ] == [ 5, 1, 4, 9 ]

-}
pushFirst : a -> Array a -> Array a
pushFirst value array =
    prepend [ value ] array


{-| Add a value to the end of the array.

    pushLast 1 []          == [ 1 ]
    pushLast 5 [ 1, 4, 9 ] == [ 1, 4, 9, 5 ]

-}
pushLast : a -> Array a -> Array a
pushLast =
    Gren.Kernel.Array.push


-- COMBINE


{-| Combine two arrays so that the first array becomes the prefix,
and the second array becomes the postfix of the resulting array.

    prepend [ 1, 2, 3 ] [ 4, 5, 6 ] == [ 1, 2, 3, 4, 5, 6 ] 

You can also use the `++` operator for this purpose.

    [ 1, 2, 3 ] ++ [ 4, 5, 6 ] == [ 1, 2, 3, 4, 5, 6 ]
-}
prepend : Array a -> Array a -> Array a
prepend =
    Gren.Kernel.Array.append


{-| Combine two arrays so that the first array becomes the postfix,
and the second array becomes the prefix of the resulting array.

    append [ 1, 2, 3 ] [ 4, 5, 6 ] == [ 4, 5, 6, 1, 2, 3 ]
    
-}
append : Array a -> Array a -> Array a
append fst second =
    prepend second fst


{-| Combine a bunch of arrays into a single array.

    flatten [ [ 1 ], [ 2 ], [ 4, 5 ] ] == [ 1, 2, 4, 5 ]

-}
flatten : Array (Array a) -> Array a
flatten =
    Gren.Kernel.Array.flat


{-| Map a given function onto an array, then flatten the resulting array.

    flatMap f xs == flatten (map f xs)

-}
flatMap : (a -> Array b) -> Array a -> Array b
flatMap =
    Gren.Kernel.Array.flatMap


{-| Places the given value between all members of the given array.

    intersperse "on" [ "turtles", "turtles", "turtles"] == [ "turtles", "on", "turtles", "on", "turtles"]

-}
intersperse : a -> Array a -> Array a
intersperse sep xs =
    case popFirst xs of
        Nothing ->
            []

        Just { first = head, rest = tail } ->
            pushFirst head <| flatMap (\val -> [ sep, val ]) tail


{-| Combine two arrays, combining them with the given function.
If one array is longer, the extra elements are dropped.

    map2 (\x y -> { x = x, y = y }) [ 1 ] [ 2 ] == [ { x = 1, y = 2 } ]
-}
map2 : (a -> b -> result) -> Array a -> Array b -> Array result
map2 =
    Gren.Kernel.Array.map2


{-| Combine three arrays, combining them with the given function.
If one array is longer, the extra elements are dropped.

    map3 (\x y z -> { x = x, y = y, z = z }) [ 1 ] [ 2 ] [ 3 ] == [ { x = 1, y = 2, z = 3 } ]
-}
map3 : (a -> b -> c -> result) -> Array a -> Array b -> Array c -> Array result
map3 =
    Gren.Kernel.Array.map3


-- DECONSTRUCT


{-| Retrieve the first element of the array, if it exists.

    first [ 1, 2, 3 ] == Just 1

-}
first : Array a -> Maybe a
first array =
    get 0 array


{-| Retrieve the last element of the array, if it exists.

    last [ 1, 2, 3 ] == Just 3

-}
last : Array a -> Maybe a
last array =
    get -1 array


{-| Get a sub section of an array: `(slice start end array)`.

The `start` is a zero-based index where we will start our slice.
The `end` is a zero-based index that indicates the end of the slice.
The slice extracts up to, but no including, the `end`.

Both `start` and `end` can be negative, indicating an offset from the end
of the array. Removing the last element of the array can be expressed as:

    `slice 0 -1 arr`.

In the case of an impossible slice, the empty array is returned.

-}
slice : Int -> Int -> Array a -> Array a
slice =
    Gren.Kernel.Array.slice


{-| Remove the first `n` elements of the array.

    dropFirst 5 [ 1 ] == []
    dropFirst 1 [ 1, 2, 3 ] == [ 2, 3 ]

-}
dropFirst : Int -> Array a -> Array a
dropFirst n array =
    slice n (length array) array


{-| Remove the last `n` elements of the array.

    dropLast 1 [ 1, 2, 3 ] == [ 1, 2 ]

-}
dropLast : Int -> Array a -> Array a
dropLast n array =
    slice 0 (length array - n) array


{-| Take the first `n` elements from the array.

    takeFirst 2 [ 1, 2, 3 ] == [ 1, 2 ]

-}
takeFirst : Int -> Array a -> Array a
takeFirst n array =
    slice 0 n array


{-| Take the last `n` elements from the array.

    takeLast 2 [ 1, 2, 3 ] == [ 2, 3 ]

-}
takeLast : Int -> Array a -> Array a
takeLast n array =
    let
        len =
            length array
    in
    slice (len - n) len array


{-| Split an array into its first element, and its remaining elements, if possible.

    popFirst [ 1, 2, 3 ] == Just { first = 1, rest = [ 2, 3 ] }

-}
popFirst : Array a -> Maybe { first : a, rest : Array a }
popFirst array =
    case first array of
        Just value ->
            Just
                { first = value
                , rest = dropFirst 1 array
                }

        Nothing ->
            Nothing


{-| Split an array into its last element, and its remaining elements, if possible.

    popFirst [ 1, 2, 3 ] == Just { last = 3, initial = [ 1, 2 ] }

-}
popLast : Array a -> Maybe { last : a, initial : Array a }
popLast array =
    case last array of
        Just value ->
            Just
                { last = value
                , initial = dropLast 1 array
                }

        Nothing ->
            Nothing


{-| Divide elements into two arrays based on the result of a boolean test.

    partition (\x -> x < 3) [ 0, 1, 2, 3, 4, 5 ] == { trues = [ 0, 1, 2 ], falses = [ 3, 4, 5 ] }

-}
partition : (a -> Bool) -> Array a -> { trues : Array a, falses : Array a }
partition fn array =
    foldl
        (\val { trues, falses } ->
            if fn val then
                { trues = pushLast val trues
                , falses = falses
                }

            else
                { trues = trues
                , falses = pushLast val falses
                }
        )
        { trues = empty, falses = empty }
        array


-- SORT


{-| Sort values from lowest to highest

    sort [ 3, 1, 5 ] == [ 1, 3, 5 ]

-}
sort : Array comparable -> Array comparable
sort =
    Gren.Kernel.Array.sort


{-| Sort values by a derived property.

    sortBy String.length [ "mouse", "cat" ] == [ "cat", "mouse" ]

-}
sortBy : (a -> comparable) -> Array a -> Array a
sortBy =
    Gren.Kernel.Array.sortBy


{-| Sort values with a custom comparison function.

    sortWith flippedComparison [1,2,3,4,5] == [5,4,3,2,1]

    flippedComparison a b =
        case compare a b of
          LT -> GT
          EQ -> EQ
          GT -> LT

This is also the most general sort function, allowing you to define any other: `sort == sortWith compare`

-}
sortWith : (a -> a -> Order) -> Array a -> Array a
sortWith =
    Gren.Kernel.Array.sortWith

