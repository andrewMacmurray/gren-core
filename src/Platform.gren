module Platform exposing
    ( Program, worker
    , Task, ProcessId
    , Router, sendToApp, sendToSelf
    )

{-| This module contains definitions important to the language runtime.
You're unlikely to make direct use of these things yourself.


@docs Program, worker


## Tasks and Processes

@docs Task, ProcessId


## Effect Manager Helpers

Effect managers can be viewed as programs-within-a-program. They have their own
state, and communicate with the application using messages.

Effect managers are used internally for many things, but isn't considered to be
truly stable. It's likely that this feature will be redesigned in a future relase.


@docs Router, sendToApp, sendToSelf

-}

import Basics exposing (Never)
import Gren.Kernel.Platform
import Gren.Kernel.Scheduler
import Platform.Cmd exposing (Cmd)
import Platform.Sub exposing (Sub)



-- PROGRAMS


{-| A `Program` describes an Gren program! How does it react to input? Does it
show anything on screen? Etc.
-}
type Program flags model msg
    = Program


{-| Create a [headless] program with no user interface.

This is great if you want to use Gren as the &ldquo;brain&rdquo; for something
else. For example, you could send messages out ports to modify the DOM, but do
all the complex logic in Gren.

[headless]: https://en.wikipedia.org/wiki/Headless_software

Initializing a headless program from JavaScript looks like this:

```javascript
var app = Gren.MyThing.init();
```

If you _do_ want to control the user interface in Gren, the [`Browser`][browser]
module has a few ways to create that kind of `Program` instead!

[headless]: https://en.wikipedia.org/wiki/Headless_software
[browser]: /package/gren-lang/browser/latest/module/Browser

-}
worker :
    { init : flags -> { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    }
    -> Program flags model msg
worker =
    Gren.Kernel.Platform.worker



-- TASKS and PROCESSES


{-| Head over to the documentation for the [`Task`](Task) module for more
information on this. It is only defined here because it is a platform
primitive.
-}
type Task err ok
    = Task


{-| Head over to the documentation for the [`Process`](Process) module for
information on this. It is only defined here because it is a platform
primitive.
-}
type ProcessId
    = ProcessId



-- EFFECT MANAGER INTERNALS


{-| An effect manager has access to a “router” that routes messages between
the main app and your individual effect manager.
-}
type Router appMsg selfMsg
    = Router


{-| Send the router a message for the main loop of your app. This message will
be handled by the overall `update` function, just like events from `Html`.
-}
sendToApp : Router msg a -> msg -> Task x {}
sendToApp =
    Gren.Kernel.Platform.sendToApp


{-| Send the router a message for your effect manager. This message will
be routed to the `onSelfMsg` function, where you can update the state of your
effect manager as necessary.

As an example, the effect manager for web sockets

-}
sendToSelf : Router a msg -> msg -> Task x {}
sendToSelf =
    Gren.Kernel.Platform.sendToSelf
