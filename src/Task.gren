effect module Task where { command = MyCmd } exposing
    ( Task, perform, attempt, execute
    , andThen, await, succeed, fail, sequence, concurrent
    , map, map2, map3, map4, map5
    , onError, mapError
    )

{-| Tasks make it easy to describe asynchronous operations that may fail, like
HTTP requests or writing to a database.


@docs Task, perform, attempt, execute


## Chains

@docs andThen, await, succeed, fail, sequence, concurrent


## Maps

@docs map, map2, map3, map4, map5


## Errors

@docs onError, mapError

-}

import Array exposing (Array)
import Basics exposing ((<<), (|>), Never)
import Gren.Kernel.Scheduler
import Maybe exposing (Maybe(..))
import Platform
import Platform.Cmd exposing (Cmd)
import Result exposing (Result(..))


{-| Here are some common tasks:

  - [`now : Task x Posix`](Time#now)
  - [`focus : String -> Task Error {}`][focus]
  - [`sleep : Float -> Task x {}`](Process#sleep)

[focus]: /package/gren-lang/browser/latest/module/Browser.Dom#focus

In each case we have a `Task` that will resolve successfully with an `a` value
or unsuccessfully with an `x` value. So `Browser.Dom.focus` we may fail with an
`Error` if the given ID does not exist. Whereas `Time.now` never fails so
I cannot be more specific than `x`. No such value will ever exist! Instead it
always succeeds with the current POSIX time.

More generally a task is a _description_ of what you need to do. Like a todo
list. Or like a grocery list. Or like GitHub issues. So saying "the task is
to tell me the current POSIX time" does not complete the task! You need
[`perform`](#perform) tasks or [`attempt`](#attempt) tasks.

-}
type alias Task x a =
    Platform.Task x a



-- BASICS


{-| A task that succeeds immediately when run. It is usually used with
[`andThen`](#andThen). You can use it like `map` if you want:

    import Time


    timeInMillis : Task x Int
    timeInMillis =
        Time.now
            |> andThen (\t -> succeed (Time.posixToMillis t))

-}
succeed : a -> Task x a
succeed =
    Gren.Kernel.Scheduler.succeed


{-| A task that fails immediately when run. Like with `succeed`, this can be
used with `andThen` to check on the outcome of another task.

    type Error
        = NotFound

    notFound : Task Error a
    notFound =
        fail NotFound

-}
fail : x -> Task x a
fail =
    Gren.Kernel.Scheduler.fail



-- MAPPING


{-| Transform a task. Maybe you want to use [`Time`][time] to figure
out what time it will be in one hour:

    import Task exposing (Task)
    import Time


    timeInOneHour : Task x Time.Posix
    timeInOneHour =
        Task.map addAnHour Time.now

    addAnHour : Time.Posix -> Time.Posix
    addAnHour time =
        Time.millisToPosix (Time.posixToMillis time + 60 * 60 * 1000)

[time]: Time

-}
map : (a -> b) -> Task x a -> Task x b
map func taskA =
    taskA
        |> andThen (\a -> succeed (func a))


{-| Put the results of two tasks together. For example, if we wanted to know
the current month, we could use [`Time`][time] to ask:

    import Task exposing (Task)
    import Time


    getMonth : Task x Int
    getMonth =
        Task.map2 Time.toMonth Time.here Time.now

**Note:** Say we were doing HTTP requests instead. `map2` starts both requests concurrently
and if either of them fails, the whole thing fails!
If one request fails and the other is still in-flight, the in-flight task will be automatically cancelled and cleaned up.

[time]: Time

-}
map2 : (a -> b -> result) -> Task x a -> Task x b -> Task x result
map2 =
    Gren.Kernel.Scheduler.map2


{-| -}
map3 : (a -> b -> c -> result) -> Task x a -> Task x b -> Task x c -> Task x result
map3 func taskA taskB taskC =
    taskA
        |> andThen
            (\a ->
                taskB
                    |> andThen
                        (\b ->
                            taskC
                                |> andThen (\c -> succeed (func a b c))
                        )
            )


{-| -}
map4 : (a -> b -> c -> d -> result) -> Task x a -> Task x b -> Task x c -> Task x d -> Task x result
map4 func taskA taskB taskC taskD =
    taskA
        |> andThen
            (\a ->
                taskB
                    |> andThen
                        (\b ->
                            taskC
                                |> andThen
                                    (\c ->
                                        taskD
                                            |> andThen (\d -> succeed (func a b c d))
                                    )
                        )
            )


{-| -}
map5 : (a -> b -> c -> d -> e -> result) -> Task x a -> Task x b -> Task x c -> Task x d -> Task x e -> Task x result
map5 func taskA taskB taskC taskD taskE =
    taskA
        |> andThen
            (\a ->
                taskB
                    |> andThen
                        (\b ->
                            taskC
                                |> andThen
                                    (\c ->
                                        taskD
                                            |> andThen
                                                (\d ->
                                                    taskE
                                                        |> andThen (\e -> succeed (func a b c d e))
                                                )
                                    )
                        )
            )


{-| Start with an array of tasks, and turn them into a single task that returns a
array. The tasks will be run in order one-by-one and if any task fails the whole
sequence fails.

    sequence [ succeed 1, succeed 2 ] == succeed [ 1, 2 ]

-}
sequence : Array (Task x a) -> Task x (Array a)
sequence =
    Array.foldr (\task combined -> task |> andThen (\x -> map (Array.pushFirst x) combined)) (succeed []) 


{-| Start with an array of tasks, and turn them into a single task that returns a
array. The tasks will be run concurrently and if any task fails the whole array fails.

    concurrent [ succeed 1, succeed 2 ] == succeed [ 1, 2 ]

Additionally if any task fails, any tasks already in-flight will be cleaned up (e.g. an in-flgiht http request will be cancelled).

**Note**: Why use `sequence` over `concurrent`? Maybe you have an expensive operation, like making 100 http requests.
You might want to do these sequentially rather than all at once to avoid overwhelming the server.

**A note on concurrency and parallelism**:

Why is there only `concurrent` and not `parallel`? Because JavaScript is single threaded, it's not possible currently to have true parallelism in gren.

- A parallel task   : multiple subtasks can be run at exactly the same time on multiple processors or CPU cores.
- A concurrent task : multiple subtasks can be in progress at the same time but not executing at exactly the same time.

In practice this means CPU bound tasks (e.g. generate a cryptographic hash) won't see a speed boost from `concurrent`.
IO bound tasks however (e.g. make a http request and wait until the response comes back) may get a noticable speed boost from `concurrent`.

-}
concurrent : Array (Task x a) -> Task x (Array a)
concurrent =
    Gren.Kernel.Scheduler.concurrent



-- CHAINING


{-| Chain together a task and a callback. The first task will run, and if it is
successful, you give the result to the callback resulting in another task. This
task then gets run. We could use this to make a task that resolves an hour from
now:


    import Process
    import Time

    timeInOneHour : Task x Time.Posix
    timeInOneHour =
        Process.sleep (60 * 60 * 1000)
            |> andThen (\_ -> Time.now)

First the process sleeps for an hour **and then** it tells us what time it is.

-}
andThen : (a -> Task x b) -> Task x a -> Task x b
andThen =
    Gren.Kernel.Scheduler.andThen


{-| This is like [andThen](andThen) but the arguments are reversed. The callback
is the last argument, instead of the first. This makes it easier to write imperative
code where each callback involves more logic.

    import Process
    import Time

    timeInOneHour : Task x Time.Posix
    timeInOneHour =
        Task.await (Process.sleep <| 60 * 60 * 1000) <| \_ ->
            Time.now

(a)wait for an hour, then fetch the current time.

-}
await : Task x a -> (a -> Task x b) -> Task x b
await tsk callback =
    Gren.Kernel.Scheduler.andThen callback tsk


-- ERRORS


{-| Recover from a failure in a task. If the given task fails, we use the
callback to recover.

    fail "file not found"
      |> onError (\msg -> succeed 42)
      -- succeed 42

    succeed 9
      |> onError (\msg -> succeed 42)
      -- succeed 9

-}
onError : (x -> Task y a) -> Task x a -> Task y a
onError =
    Gren.Kernel.Scheduler.onError


{-| Transform the error value. This can be useful if you need a bunch of error
types to match up.

    type Error
        = Http Http.Error
        | WebGL WebGL.Error

    getResources : Task Error Resource
    getResources =
        sequence
            [ mapError Http serverTask
            , mapError WebGL textureTask
            ]

-}
mapError : (x -> y) -> Task x a -> Task y a
mapError convert task =
    task
        |> onError (fail << convert)


-- COMMANDS


type MyCmd msg
    = Perform (Task Never msg)
    | Execute (Task Never {})


{-| Like I was saying in the [`Task`](#Task) documentation, just having a
`Task` does not mean it is done. We must command Gren to `perform` the task:



    import Task
    import Time

    type Msg
        = Click
        | Search String
        | NewTime Time.Posix

    getNewTime : Cmd Msg
    getNewTime =
        Task.perform NewTime Time.now

So we have changed a task like "make delicious lasagna" into a command like
"Hey Gren, make delicious lasagna and give it to my `update` function as a
`Msg` value."

-}
perform : (a -> msg) -> Task Never a -> Cmd msg
perform toMessage task =
    command (Perform (map toMessage task))


{-| This is very similar to [`perform`](#perform) except it can handle failures!
So we could _attempt_ to focus on a certain DOM node like this:

    -- gren install gren-lang/browser


    import Browser.Dom
    import Task

    type Msg
        = Click
        | Search String
        | Focus (Result Browser.DomError {})

    focus : Cmd Msg
    focus =
        Task.attempt Focus (Browser.Dom.focus "my-app-search-box")

So the task is "focus on this DOM node" and we are turning it into the command
"Hey Gren, attempt to focus on this DOM node and give me a `Msg` about whether
you succeeded or failed."

-}
attempt : (Result x a -> msg) -> Task x a -> Cmd msg
attempt resultToMessage task =
    command
        (Perform
            (task
                |> andThen (succeed << resultToMessage << Ok)
                |> onError (succeed << resultToMessage << Err)
            )
        )


{-| Sometimes we want to give a command without being told how it went. Maybe we
are logging something to the screen, or changing the scroll position of the window.
In either case, there's really nothing for us to do afterwards. In those cases
we can use `execute`.
-}
execute : Task Never a -> Cmd msg
execute task =
    command (Execute (map (\_ -> {}) task))


cmdMap : (a -> b) -> MyCmd a -> MyCmd b
cmdMap tagger cmd =
    when cmd is
        Perform task ->
            Perform (map tagger task)

        Execute task ->
            Execute task


-- MANAGER


init : Task Never {}
init =
    succeed {}


onEffects : Platform.Router msg Never -> Array (MyCmd msg) -> {} -> Task Never {}
onEffects router commands state =
    map
        (\_ -> {})
        (sequence (Array.map (spawnCmd router) commands))


onSelfMsg : Platform.Router msg Never -> Never -> {} -> Task Never {}
onSelfMsg _ _ _ =
    succeed {}


spawnCmd : Platform.Router msg Never -> MyCmd msg -> Task x {}
spawnCmd router cmd =
    when cmd is
        Perform task ->
            Gren.Kernel.Scheduler.spawn
                (task
                    |> andThen (Platform.sendToApp router)
                )

        Execute task ->
            Gren.Kernel.Scheduler.spawn task
