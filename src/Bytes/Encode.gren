module Bytes.Encode exposing
  ( encode
  , Encoder
  , signedInt8, signedInt16, signedInt32
  , unsignedInt8, unsignedInt16, unsignedInt32
  , float32, float64
  , bytes
  , sequence
  )


{-| Functions for turning things into bytes.

@docs Encoder, encode, sequence

## Integers
@docs signedInt8, signedInt16, signedInt32, unsignedInt8, unsignedInt16, unsignedInt32

## Floats
@docs float32, float64

## Bytes
@docs bytes

-}


import Array exposing (Array)
import Basics exposing (..)
import Bytes exposing (Bytes, Endianness(..))
import Maybe exposing (Maybe(..))
import String exposing (String)



-- ENCODER


{-| Describes how to generate a sequence of bytes.

These encoders snap together with [`sequence`](#sequence) so you can start with
small building blocks and put them together into a more complex encoding.
-}
type Encoder
  = I8 Int
  | I16 (WithEndian Int)
  | I32 (WithEndian Int)
  | U8 Int
  | U16 (WithEndian Int)
  | U32 (WithEndian Int)
  | F32 (WithEndian Float)
  | F64 (WithEndian Float)
  | Seq { width : Int, items : Array Encoder }
  | Bytes Bytes


type alias WithEndian number =
  { endian : Endianness
  , number : number
  }


-- ENCODE


{-| Turn an `Encoder` into `Bytes`.

    encode (unsignedInt8     7) -- <07>
    encode (unsignedInt16 BE 7) -- <0007>
    encode (unsignedInt16 LE 7) -- <0700>

The `encode` function is designed to minimize allocation. It figures out the
exact length necessary to fit everything in `Bytes` and then generate that
value directly. This is valuable when you are encoding more elaborate data:

    import Bytes exposing (Endianness(..))
    import Bytes.Encode as Encode

    type alias Person =
      { age : Int
      , name : String
      }

    toEncoder : Person -> Encode.Encoder
    toEncoder person =
      Encode.sequence
        [ Encode.unsignedInt16 BE person.age
        , Encode.unsignedInt16 BE (Encode.getStringWidth person.name)
        , Encode.string person.name
        ]

    -- encode (toEncoder ({ age = 33, name = "Tom" })) == <00210003546F6D>

Did you know it was going to be seven bytes? How about when you have a hundred
people to serialize? And when some have Japanese and Norwegian names? Having
this intermediate `Encoder` can help reduce allocation quite a lot!
-}
encode : Encoder -> Bytes
encode =
  Gren.Kernel.Bytes.encode



-- INTEGERS


{-| Encode integers from `-128` to `127` in one byte.
-}
signedInt8 : Int -> Encoder
signedInt8 n =
  I8 n


{-| Encode integers from `-32768` to `32767` in two bytes.
-}
signedInt16 : Endianness -> Int -> Encoder
signedInt16 e n =
  I16 { endian = e, number = n }


{-| Encode integers from `-2147483648` to `2147483647` in four bytes.
-}
signedInt32 : Endianness -> Int -> Encoder
signedInt32 e n =
  I32 { endian = e, number = n }


{-| Encode integers from `0` to `255` in one byte.
-}
unsignedInt8 : Int -> Encoder
unsignedInt8 n =
  U8 n


{-| Encode integers from `0` to `65535` in two bytes.
-}
unsignedInt16 : Endianness -> Int -> Encoder
unsignedInt16 e n =
  U16 { endian = e, number = n }


{-| Encode integers from `0` to `4294967295` in four bytes.
-}
unsignedInt32 : Endianness -> Int -> Encoder
unsignedInt32 e n =
  U32 { endian = e, number = n }


-- FLOATS


{-| Encode 32-bit floating point numbers in four bytes.
-}
float32 : Endianness -> Float -> Encoder
float32 e n =
  F32 { endian = e, number = n }


{-| Encode 64-bit floating point numbers in eight bytes.
-}
float64 : Endianness -> Float -> Encoder
float64 e n =
  F64 { endian = e, number = n }



-- BYTES


{-| Copy bytes directly into the new `Bytes` sequence. This does not record the
length though! You usually want to say something like this:

    import Bytes exposing (Bytes, Endianness(..))
    import Bytes.Encode as Encode

    png : Bytes -> Encode.Encoder
    png imageData =
      Encode.sequence
        [ Encode.unsignedInt32 BE (Bytes.length imageData)
        , Encode.bytes imageData
        ]

This allows you to represent the length however is necessary for your protocol.
For example, you can use [Base 128 Varints][pb] for ProtoBuf,
[Variable-Length Integers][sql] for SQLite, or whatever else they dream up.

[pb]: https://developers.google.com/protocol-buffers/docs/encoding#varints
[sql]: https://www.sqlite.org/src4/doc/trunk/www/varint.wiki
-}
bytes : Bytes -> Encoder
bytes =
  Bytes


-- SEQUENCE


{-| Put together a bunch of builders. So if you wanted to encode three `Float`
values for the position of a ball in 3D space, you could say:

    import Bytes exposing (Endianness(..))
    import Bytes.Encode as Encode

    type alias Ball = { x : Float, y : Float, z : Float }

    ball : Ball -> Encode.Encoder
    ball {x,y,z} =
      Encode.sequence
        [ Encode.float32 BE x
        , Encode.float32 BE y
        , Encode.float32 BE z
        ]

-}
sequence : Array Encoder -> Encoder
sequence builders =
  Seq { width = (getLengths 0 builders), items = builders }


-- WRITE


write : Encoder -> Bytes -> Int -> Int
write builder mb offset =
  when builder is
    I8    n -> Gren.Kernel.Bytes.write_i8  mb offset n
    I16 { endian = e, number = n } -> Gren.Kernel.Bytes.write_i16 mb offset n (e == LE)
    I32 { endian = e, number = n } -> Gren.Kernel.Bytes.write_i32 mb offset n (e == LE)
    U8    n -> Gren.Kernel.Bytes.write_u8  mb offset n
    U16 { endian = e, number = n } -> Gren.Kernel.Bytes.write_u16 mb offset n (e == LE)
    U32 { endian = e, number = n } -> Gren.Kernel.Bytes.write_u32 mb offset n (e == LE)
    F32 { endian = e, number = n } -> Gren.Kernel.Bytes.write_f32 mb offset n (e == LE)
    F64 { endian = e, number = n } -> Gren.Kernel.Bytes.write_f64 mb offset n (e == LE)
    Seq { items = bs } -> writeSequence bs mb offset
    Bytes bs -> Gren.Kernel.Bytes.write_bytes mb offset bs


writeSequence : Array Encoder -> Bytes -> Int -> Int
writeSequence builders mb offset =
  Array.foldl
    (\builder currentOffset ->
      write builder mb currentOffset
    )
    offset
    builders


-- LENGTHS


getLength : Encoder -> Int
getLength builder =
  when builder is
    I8  _ -> 1
    I16 _ -> 2
    I32 _ -> 4
    U8  _ -> 1
    U16 _ -> 2
    U32 _ -> 4
    F32 _ -> 4
    F64 _ -> 8
    Seq { width = w } -> w
    Bytes bs -> Gren.Kernel.Bytes.length bs


getLengths : Int -> Array Encoder -> Int
getLengths length builders =
  Array.foldl 
    (\builder sum ->
      sum + getLength builder
    )
    length
    builders
