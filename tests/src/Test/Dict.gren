module Test.Dict exposing (tests)

import Basics exposing (..)
import Dict
import Expect
import Array
import Maybe exposing (..)
import Test exposing (..)


animals : Dict.Dict String String
animals =
    Dict.empty
        |> Dict.set "Tom" "cat"
        |> Dict.set "Jerry" "mouse"


tests : Test
tests =
    let
        buildTests =
            describe "build Tests"
                [ test "singleton" <| \{} -> Expect.equal (Dict.set "k" "v" Dict.empty) (Dict.singleton "k" "v")
                , test "set replace" <| \{} -> Expect.equal (Dict.set "k" "vv" Dict.empty) (Dict.set "k" "vv" (Dict.singleton "k" "v"))
                , test "update" <| \{} -> Expect.equal (Dict.set "k" "vv" Dict.empty) (Dict.update "k" (\v -> Just "vv") (Dict.singleton "k" "v"))
                , test "update Nothing" <| \{} -> Expect.equal Dict.empty (Dict.update "k" (\v -> Nothing) (Dict.singleton "k" "v"))
                , test "remove" <| \{} -> Expect.equal Dict.empty (Dict.remove "k" (Dict.singleton "k" "v"))
                , test "remove not found" <| \{} -> Expect.equal (Dict.singleton "k" "v") (Dict.remove "kk" (Dict.singleton "k" "v"))
                ]

        queryTests =
            describe "query Tests"
                [ test "member 1" <| \{} -> Expect.equal True (Dict.member "Tom" animals)
                , test "member 2" <| \{} -> Expect.equal False (Dict.member "Spike" animals)
                , test "get 1" <| \{} -> Expect.equal (Just "cat") (Dict.get "Tom" animals)
                , test "get 2" <| \{} -> Expect.equal Nothing (Dict.get "Spike" animals)
                , test "size of empty dictionary" <| \{} -> Expect.equal 0 (Dict.size Dict.empty)
                , test "size of example dictionary" <| \{} -> Expect.equal 2 (Dict.size animals)
                , test "first value of animals is (J)erry" <| \{} -> Expect.equal (Just { key = "Jerry", value = "mouse" }) (Dict.first animals)
                , test "first value of animals is (T)om" <| \{} -> Expect.equal (Just { key = "Tom", value = "cat" }) (Dict.last animals)
                ]

        combineTests =
            describe "combine Tests"
                [ test "union" <| \{} -> Expect.equal animals (Dict.union (Dict.singleton "Jerry" "mouse") (Dict.singleton "Tom" "cat"))
                , test "union collison" <| \{} -> Expect.equal (Dict.singleton "Tom" "cat") (Dict.union (Dict.singleton "Tom" "cat") (Dict.singleton "Tom" "mouse"))
                , test "intersect" <| \{} -> Expect.equal (Dict.singleton "Tom" "cat") (Dict.intersect animals (Dict.singleton "Tom" "cat"))
                , test "diff" <| \{} -> Expect.equal (Dict.singleton "Jerry" "mouse") (Dict.diff animals (Dict.singleton "Tom" "cat"))
                ]

        transformTests =
            describe "transform Tests"
                [ test "filter" <| \{} -> Expect.equal (Dict.singleton "Tom" "cat") (Dict.filter (\k v -> k == "Tom") animals)
                , test "map" <| \{} -> Expect.equal (Dict.empty |> Dict.set "Tom" "tac" |> Dict.set "Jerry" "esuom") (Dict.map (\_ v -> String.reverse v) animals)
                , test "filterMap" <| \{} -> Expect.equal (Dict.singleton "Tom" "tac") (Dict.filterMap (\k v -> if k == "Tom" then Just (String.reverse v) else Nothing) animals)
                , test "partition" <| \{} -> Expect.equal { trues = Dict.singleton "Tom" "cat", falses = Dict.singleton "Jerry" "mouse" } (Dict.partition (\k v -> k == "Tom") animals)
                ]

        mergeTests =
            let
                setBoth key leftVal rightVal dict =
                    Dict.set key (leftVal ++ rightVal) dict

                s1 =
                    Dict.singleton "u1" [ 1 ]

                s2 =
                    Dict.singleton "u2" [ 2 ]

                s23 =
                    Dict.singleton "u2" [ 3 ]

                b1 =
                    Array.foldl (\i dict -> Dict.set i [ i ] dict) Dict.empty (Array.range 1 10)

                b2 =
                    Array.foldl (\i dict -> Dict.set i [ i ] dict) Dict.empty (Array.range 5 15)

                bExpected =
                    Dict.empty
                        |> Dict.set 1 [1]
                        |> Dict.set 2 [2]
                        |> Dict.set 3 [3]
                        |> Dict.set 4 [4]
                        |> Dict.set 5 [5,5]
                        |> Dict.set 6 [6,6]
                        |> Dict.set 7 [7,7]
                        |> Dict.set 8 [8,8]
                        |> Dict.set 9 [9,9]
                        |> Dict.set 10 [10,10]
                        |> Dict.set 11 [11]
                        |> Dict.set 12 [12]
                        |> Dict.set 13 [13]
                        |> Dict.set 14 [14]
                        |> Dict.set 15 [15]
            in
            describe "merge Tests"
                [ test "merge empties" <|
                    \{} ->
                        Expect.equal Dict.empty
                            (Dict.merge Dict.set setBoth Dict.set Dict.empty Dict.empty Dict.empty)
                , test "merge singletons in order" <|
                    \{} ->
                        Expect.equal ( Dict.empty |> Dict.set "u1" [ 1 ] |> Dict.set "u2" [ 2 ])
                            (Dict.merge Dict.set setBoth Dict.set s1 s2 Dict.empty)
                , test "merge singletons out of order" <|
                    \{} ->
                        Expect.equal ( Dict.empty |> Dict.set "u1" [ 1 ] |> Dict.set "u2" [ 2 ])
                            (Dict.merge Dict.set setBoth Dict.set s2 s1 Dict.empty)
                , test "merge with duplicate key" <|
                    \{} ->
                        Expect.equal ( Dict.singleton "u2" [ 2, 3 ] )
                            (Dict.merge Dict.set setBoth Dict.set s2 s23 Dict.empty)
                , test "partially overlapping" <|
                    \{} ->
                        Expect.equal bExpected
                            (Dict.merge Dict.set setBoth Dict.set b1 b2 Dict.empty)
                ]
    in
    describe "Dict Tests"
        [ buildTests
        , queryTests
        , combineTests
        , transformTests
        , mergeTests
        ]
