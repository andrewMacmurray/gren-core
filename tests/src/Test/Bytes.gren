module Test.Bytes exposing (tests)

import Bytes exposing (Bytes)
import Bytes.Encode
import Expect
import Fuzz
import Test exposing (..)


encodeInt : Int -> Bytes
encodeInt i =
    Bytes.Encode.encode <|
        Bytes.Encode.signedInt8 i


tests : Test
tests =
    describe "Byte comparison"
        [ fuzz Fuzz.string "same strings are equal" <| \s ->
            Expect.equal (Bytes.fromString s) (Bytes.fromString s)
        , fuzz (Fuzz.intRange -128 127) "same ints are equal" <| \i ->
            Expect.equal (encodeInt i) (encodeInt i)
        , fuzz Fuzz.string "different strings are not equal" <| \s ->
            Expect.notEqual (Bytes.fromString s) (Bytes.fromString (s ++ "a"))
        , fuzz (Fuzz.intRange -100 100) "different ints are not equal" <| \i ->
            Expect.notEqual (encodeInt i) (encodeInt (i + 1))
        , fuzz2 Fuzz.string (Fuzz.intRange 1 127) "string and int are not equal" <| \s i ->
            Expect.notEqual (Bytes.fromString s) (encodeInt i)
        ]
