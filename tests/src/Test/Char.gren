module Test.Char exposing (tests)

import Basics exposing (..)
import Char exposing (..)
import Expect
import Array
import Test exposing (..)


lower =
    [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' ]


upper =
    [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]


dec =
    [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ]


oct =
    Array.takeFirst 8 dec


hexLower =
    Array.takeFirst 6 lower


hexUpper =
    Array.takeFirst 6 upper


hex =
    Array.prepend hexLower hexUpper |> Array.prepend dec


lowerCodes =
    Array.range 97 (97 + Array.length lower - 1)


upperCodes =
    Array.range 65 (65 + Array.length upper - 1)


decCodes =
    Array.range 48 (48 + Array.length dec - 1)


oneOf : Array a -> a -> Bool
oneOf array e =
    Array.member e array


tests : Test
tests =
    describe "Char"
        [ describe "toCode"
            [ test "a-z" <| \{} -> Expect.equal lowerCodes (Array.map toCode lower)
            , test "A-Z" <| \{} -> Expect.equal upperCodes (Array.map toCode upper)
            , test "0-9" <| \{} -> Expect.equal decCodes (Array.map toCode dec)
            , test "UTF-16" <| \{} -> Expect.equal 0x0001D306 (Char.toCode 'ùåÜ')
            ]
        , describe "fromCode"
            [ test "a-z" <| \{} -> Expect.equal lower (Array.map fromCode lowerCodes)
            , test "A-Z" <| \{} -> Expect.equal upper (Array.map fromCode upperCodes)
            , test "0-9" <| \{} -> Expect.equal dec (Array.map fromCode decCodes)
            , test "UTF-16" <| \{} -> Expect.equal 'ùåÜ' (Char.fromCode 0x0001D306)
            ]
        , describe "isLower"
            [ test "a-z" <| \{} -> Expect.equal True (Array.all isLower lower)
            , test "A-Z" <| \{} -> Expect.equal False (Array.any isLower upper)
            , test "0-9" <| \{} -> Expect.equal False (Array.any isLower dec)
            ]
        , describe "isUpper"
            [ test "a-z" <| \{} -> Expect.equal False (Array.any isUpper lower)
            , test "A-Z" <| \{} -> Expect.equal True (Array.all isUpper upper)
            , test "0-9" <| \{} -> Expect.equal False (Array.any isUpper dec)
            ]
        , describe "isDigit"
            [ test "a-z" <| \{} -> Expect.equal False (Array.any isDigit lower)
            , test "A-Z" <| \{} -> Expect.equal False (Array.any isDigit upper)
            , test "0-9" <| \{} -> Expect.equal True (Array.all isDigit dec)
            ]
        , describe "isHexDigit"
            [ test "a-z" <| \{} -> Expect.equal (Array.map (oneOf hex) lower) (Array.map isHexDigit lower)
            , test "A-Z" <| \{} -> Expect.equal (Array.map (oneOf hex) upper) (Array.map isHexDigit upper)
            , test "0-9" <| \{} -> Expect.equal True (Array.all isHexDigit dec)
            ]
        , describe "isOctDigit"
            [ test "a-z" <| \{} -> Expect.equal False (Array.any isOctDigit lower)
            , test "A-Z" <| \{} -> Expect.equal False (Array.any isOctDigit upper)
            , test "0-9" <| \{} -> Expect.equal (Array.map (oneOf oct) dec) (Array.map isOctDigit dec)
            ]
        ]
