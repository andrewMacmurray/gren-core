module Test.Math exposing (tests)

import Basics exposing (..)
import Math exposing (..)
import Expect exposing (FloatingPointTolerance(..))
import Test exposing (..)


tests : Test
tests =
    let
        trigTests =
            describe "Trigonometry Tests"
                [ test "radians 0" <| \{} -> Expect.equal 0 (radians 0)
                , test "radians positive" <| \{} -> Expect.equal 5 (radians 5)
                , test "radians negative" <| \{} -> Expect.equal -5 (radians -5)
                , test "degrees 0" <| \{} -> Expect.equal 0 (degrees 0)
                , test "degrees 90" <| \{} -> Expect.lessThan 0.01 (abs (1.57 - degrees 90))

                -- This should test to enough precision to know if anything's breaking
                , test "degrees -145" <| \{} -> Expect.lessThan 0.01 (abs (-2.53 - degrees -145))

                -- This should test to enough precision to know if anything's breaking
                , test "turns 0" <| \{} -> Expect.equal 0 (turns 0)
                , test "turns 8" <| \{} -> Expect.lessThan 0.01 (abs (50.26 - turns 8))

                -- This should test to enough precision to know if anything's breaking
                , test "turns -133" <| \{} -> Expect.lessThan 0.01 (abs (-835.66 - turns -133))

                , test "cos" <| \{} -> Expect.equal 1 (cos 0)
                , test "sin" <| \{} -> Expect.equal 0 (sin 0)
                , test "tan" <| \{} -> Expect.lessThan 0.01 (abs (12.67 - tan 17.2))
                , test "acos" <| \{} -> Expect.lessThan 0.01 (abs (3.14 - acos -1))
                , test "asin" <| \{} -> Expect.lessThan 0.01 (abs (0.3 - asin 0.3))
                , test "atan" <| \{} -> Expect.lessThan 0.01 (abs (1.57 - atan 4567.8))
                , test "atan2" <| \{} -> Expect.lessThan 0.01 (abs (1.55 - atan2 36 0.65))
                , test "pi" <| \{} -> Expect.lessThan 0.01 (abs (3.14 - pi))
                ]

        basicMathTests =
            describe "Basic Math Tests"
                [ test "add float" <| \{} -> Expect.equal 159 (155.6 + 3.4)
                , test "add int" <| \{} -> Expect.equal 17 (round 10 + round 7)
                , test "subtract float" <| \{} -> Expect.within (Absolute 0.00000001) -6.3 (1 - 7.3)
                , test "subtract int" <| \{} -> Expect.equal 1130 (round 9432 - round 8302)
                , test "multiply float" <| \{} -> Expect.within (Relative 0.00000001) 432 (96 * 4.5)
                , test "multiply int" <| \{} -> Expect.equal 90 (round 10 * round 9)
                , test "divide float" <| \{} -> Expect.within (Relative 0.00000001) 13.175 (527 / 40)
                , test "divide int" <| \{} -> Expect.equal 23 (70 // 3)
                , test "7 |> remainderBy 2" <| \{} -> Expect.equal 1 (7 |> remainderBy 2)
                , test "-1 |> remainderBy 4" <| \{} -> Expect.equal -1 (-1 |> remainderBy 4)
                , test "modBy 2 7" <| \{} -> Expect.equal 1 (modBy 2 7)
                , test "modBy 4 -1" <| \{} -> Expect.equal 3 (modBy 4 -1)
                , test "3^2" <| \{} -> Expect.equal 9 (3 ^ 2)
                , test "sqrt" <| \{} -> Expect.equal 9 (sqrt 81)
                , test "negate 42" <| \{} -> Expect.equal -42 (negate 42)
                , test "negate -42" <| \{} -> Expect.equal 42 (negate -42)
                , test "negate 0" <| \{} -> Expect.equal 0 (negate 0)
                , test "abs -25" <| \{} -> Expect.equal 25 (abs -25)
                , test "abs 76" <| \{} -> Expect.equal 76 (abs 76)
                , test "logBase 10 100" <| \{} -> Expect.equal 2 (logBase 10 100)
                , test "logBase 10 1000" <| \{} -> Expect.equal 3 (logBase 10 1000)
                , test "logBase 2 256" <| \{} -> Expect.equal 8 (logBase 2 256)
                , test "e" <| \{} -> Expect.lessThan 0.01 (abs (2.72 - e))
                ]
        
        conversionTests =
            describe "Conversion Tests"
                [ test "round 0.6" <| \{} -> Expect.equal 1 (round 0.6)
                , test "round 0.4" <| \{} -> Expect.equal 0 (round 0.4)
                , test "round 0.5" <| \{} -> Expect.equal 1 (round 0.5)
                , test "truncate -2367.9267" <| \{} -> Expect.equal -2367 (truncate -2367.9267)
                , test "floor -2367.9267" <| \{} -> Expect.equal -2368 (floor -2367.9267)
                , test "ceiling 37.2" <| \{} -> Expect.equal 38 (ceiling 37.2)
                , test "toFloat 25" <| \{} -> Expect.equal 25 (toFloat 25)
                ]
    in
    describe "Math"
        [ trigTests
        , basicMathTests
        , conversionTests
        ] 
